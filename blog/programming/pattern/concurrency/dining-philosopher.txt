2:I[2972,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],""]
3:I[1824,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
6:I[7861,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
7:I[4497,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
8:I[3790,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"WithTooltip"]
9:I[4707,[],""]
b:I[6423,[],""]
c:I[4908,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"ContextProvider"]
d:I[1739,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
e:I[9813,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
f:I[4829,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
10:I[8127,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
11:I[2556,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
12:I[3268,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
13:I[8285,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
14:I[7656,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"default"]
15:I[5395,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-a852d08a903d37c5.js"],"CopyButtonScriptor"]
4:T35a4,
## [Dining Philosopher](https://en.wikipedia.org/wiki/Dining_philosophers_problem)

데드락을 설명하는 고전적인 예제이다. 데드락의 요건은 여러가지가 있는데 주로 자원점유와 순환성을 제거하여 해결한다.


### 간단한 해결방안들

$$n$$ 명의 철학자가 있는 경우 최대 $$n-1$$ 명의 철학자만 포크를 들면 순환이 생기지 않는다. 사전에 참가자 수를 모르면 쓸 수 없는 단점이 있다.

포크에 순서를 부여해 순서 대로 포크에 락을 걸면 순환이 생기지 않는다. 필요한 자원을 사전에 모르면 비효율적이게 되는 단점이 있다. 예를들어 3,5번을 얻고 2번을 얻어야 하는 걸 뒤늦게 알았을 경우 3,5를 풀고 다시 2,3,5를 얻어야하는 비효율적인 상황이 생길 수 있다.

### Lock and await

아래는 직접 구현한 lock 과 conditional 을 사용해 식사하는 철학자 문제를 구현한 것이다.(ReentrantLock 을 쓰기 싫었다.) 큰 로직은 다익스트라 방법이랑 비슷하다. 필요한 포크가 없으면 점유를 푼 뒤 대기하고 이웃은 포크를 다 쓴 후 대기를 풀어준다. 점유를 푸는 로직이 빠져도 무조건 포크 두개를 동시에 들어야 해서 데드락은 걸리지 않지만 효율성이 떨어진다.

```java title="Main.java"
package dining_philosohper;
public class Main {

  public static void main(String[] args) throws InterruptedException {
    Philosopher[] philosophers = new Philosopher[5];
    MyLock table = new MyLock();

    int cnt = 5;
    for (int i = 0; i < cnt; ++i)
      philosophers[i] = new Philosopher(table);
    for (int i = 0; i < cnt; ++i) {
      philosophers[i].setLeft(philosophers[(i - 1 + cnt) % cnt]);
      philosophers[i].setRight(philosophers[(i + 1) % cnt]);
      philosophers[i].start();
    }
    for (int i = 0; i < cnt; ++i)
      philosophers[i].join();
  }
}

```

```java title="MyBaseLock.java"
package dining_philosohper;
public class MyBaseLock
{
    private volatile boolean isLocked = false;
    public synchronized void lock() throws InterruptedException{
        while(isLocked) wait();
        isLocked = true;
    }
    public synchronized void unlock(){
        isLocked = false;
        notify();
    }
    public synchronized void await(MyBaseLock lock2) throws InterruptedException
    {
        isLocked = true;
        while(isLocked) wait();
    }
}
```

```java title="MyCondition.java"
package dining_philosohper;
public class MyCondition {
    MyBaseLock mLock;
    MyBaseLock mPrivateLock = new MyBaseLock();
    public MyCondition(MyBaseLock lock)
    {
        mLock = lock;
    }
    public void signal() { mPrivateLock.unlock(); }
    public void await() throws InterruptedException { mLock.unlock(); mPrivateLock.await(mLock); mLock.lock();}
}
```

```java title="MyLock.java"
package dining_philosohper;
public class MyLock {
    MyBaseLock mLock = new MyBaseLock();
    public MyCondition newCondition(){
        return new MyCondition(mLock);
    }
    public void lock() throws InterruptedException {
        mLock.lock();
    }
    public void unlock() throws InterruptedException {
        mLock.unlock();
    }
}
```

```java title="Philosopher.java"
package dining_philosohper;

class Philosopher extends Thread {

  private int thinkCount;
  private volatile boolean eating;
  private Philosopher left;
  private Philosopher right;
  private MyCondition condition;
  final private MyLock table;

  public Philosopher(MyLock table) {
    eating = false;
    this.table = table;
    condition = table.newCondition();
  }

  public void setLeft(Philosopher left) { this.left = left; }
  public void setRight(Philosopher right) { this.right = right; }

  public void run() {
    try {
      while (true) {
        think();
        eat();
      }
    } catch (InterruptedException e) {}
  }

  private void think() throws InterruptedException {
    Thread.sleep((int)(Math.random()*1000));
    System.out.println("Philosopher " + this + " has thought " + ++thinkCount + " times");
  }

  private void eat() throws InterruptedException {
    try {
      table.lock();
      while (left.eating || right.eating)
        condition.await();

      assert !left.eating && !right.eating;
      eating = true;
      
    } finally {
      table.unlock();
    }
    
    Thread.sleep((int)(Math.random()*1000));
    System.out.println("Philosopher " + this + " has eaten");
    eating = false;
    
    right.condition.signal();
    left.condition.signal();
  }
}
```

### Chandy/Misra solution

[이 논문](https://www.cs.utexas.edu/~misra/scannedPdf.dir/DrinkingPhil.pdf)
의 내용이다.

특징은 lock 없이 가능하며 지역적 상태만 가지고 문제를 해결할 수 있어 분산 시스템에도 적용 가능한 방법이라는 것이다. 단점은 초기 상태가 특정 상태가 되어야 한다는 것이다. 

아이디어는 DAG 를 만드는 것이다. 우선순위가 높은 프로세스에서 낮은 프로세스로 선이 이어진다. DAG 성격 상 이웃한 정점의 깊이는 다르기 때문에 conflict 가 발생하는 이웃 정점 간의 구분가능한 속성이 된다(__distinguishability__ 만족). 그리고 어떠한 규칙에 따라 DAG 를 수정하면 임의의 정점의 깊이가 유한한 시간 안에 0이 되어 __fairness__ 를 만족하게 된다.

자세히 들어가보자. 철학자는 세가지 속성을 갖는다. (논문에는 추가로 토큰이 있지만 생략하겠음.) 
1. 철학자의 상태. 생각/배고픔/먹음의 세가지 상태가 있다.
2. 포크를 들고있는지 여부.
3. 포크가 더러운지 여부.

포크의 더러움 여부가 다른 해결방안과의 차별점임에 주목하자. 이러한 임의의 철학자 u, v 는 서로 공유하는 포크를 다음의 규칙에 따라 가진다.
1. u 가 먹는 상태가 아니고 깨끗한 포크를 들고 있으면 포크를 계속 가진다.
2. u 가 먹는 상태가 아니고 더러운 포크를 들고 있으면 포크를 깨끗하게 해서 v 에게 준다.
3. u 가 먹는 상태가 아니고 깨끗한 포크를 모두 들고 있으면 식사를 한다. 그 후 포크가 모두 더러워진다. (이는 두번째 규칙으로 이어진다.)

위의 규칙을 살펴보면 임의의 철학자 u, v 에 대해서 u 가 우선적으로 포크를 갖는 경우는 다음과 같다. (나머지 경우는 v 가 우선순위를 갖는다.)
+ u 가 포크를 들고 있고 포크가 깨끗하다.
+ v 가 포크를 들고 있고 포크가 더럽다.
+ v 가 포크를 u 로 보내는 중이다.

임의의 철학자 u, v 에 대해서 u 가 포크에 대한 우선순위가 있을 때 u 에서 v 로 선이 이어진다고 하자. 이렇게 만든 그래프를 우선순위 그래프 H 라고 하자. 이 그래프는 세가지 특징이 있다.
1. 초기 상태가 DAG 를 만족하는 경우 이후에도 계속 DAG 이다. 증명은 간단한게 포크의 상태가 바뀔 때만 그래프가 변하는데 이때 모든 간선이 한 정점의 방향으로 가게 되어 순환이 생길 수 없기 때문이다.
2. 유한한 시간 안에 H 가 바뀌어 임의의 프로세스 p 의 깊이가 0 가 된다. 증명은 깊이에 대한 수학적 귀납을 써야하는데 생략한다. 위 논문 참고.
3. H 그래프의 변경은 지역적으로 이루어진다.(한번에 한 정점과 그 이웃만 바뀐다.) 그래서 한 정점이 H 전체를 알 필요가 없어 분산 시스템을 가능하게 한다.

위 로직은 다음을 만족하는데 참고로 적어둔다.
+ __distinguishability__ 는 충돌이 일어날 때 적어도 하나 이상의 프로세스가 구분가능해야 한다는 것이다. 구분이 불가능하면 우리는 충돌 시 프로세스를 랜덤하게 선택할 수 밖에 없고 이는 곧 확률에 기반한 알고리즘이라는 말이 된다. 이를 위해 프로세스에 ID 같은 상태가 부여되어야 한다. 여기서는 우선순위 DAG H 상의 깊이를 사용한다. 
+ __fairness__ 는 충돌이 일어날 때 유한한 시간 안에 모든 프로세스가 한번 이상 수행이 되어야한다는 것이다. 이를 위해선 프로세스에 부여한 상태 외의 시간 스탬프 같은 부가 상태를 사용할 수도 있지만 여기선 쓰지 않고 이 속성을 만족시킨다.


#### 구현

위를 자바로 구현하면 다음과 같다. 아래 예제는 전형적인 원형 테이블이 아니라 모든 철학자들 간에 포크가 있도록 구성하였다. 이웃 설정하는 부분만 바꾸면 전형적인 원형 테이블로도 수행할 수 있다.

```java title="Main.java"
package dining_philosopher2;
public class Main {

  public static void main(String[] args) throws InterruptedException {
    int cnt = 5;
    Philosopher[] philosophers = new Philosopher[cnt];

    for (int i = 0; i < cnt; ++i)
      philosophers[i] = new Philosopher();
    for(int i = 0; i < cnt; i++){
      for(int j = 0; j < cnt; j++){
        if(i == j) continue;
        philosophers[i].setNeighbor(philosophers[j], i < j);
      }
      philosophers[i].start();
    }
    for (int i = 0; i < cnt; ++i)
      philosophers[i].join();
  }
}
```

```java title="Philosopher.java"
package dining_philosopher2;

import java.util.HashMap;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Philosopher extends Thread {
    class ForkState{
        public boolean hasFork, isDirty;
        ForkState(boolean fork){
            isDirty = true;
            hasFork = fork;
        }
    }
    class Message{
        public Philosopher sender;
        public int type;
        public Message(Philosopher sender){
            this.sender = sender;
        }
    }

    HashMap<Philosopher,Philosopher.ForkState> states = new HashMap<Philosopher,Philosopher.ForkState>();
    Queue<Message> msgQueue = new ConcurrentLinkedQueue<Message>();
    boolean isHungry = false;

    public void setNeighbor(Philosopher neighbor, boolean fork){
        states.put(neighbor, new ForkState(fork));
    }
    public void run() {
        try {
          while (true) {
            changeState();
            think();
            eat();
          }
        } catch (InterruptedException e) {}
      }

    void receiveFork(Philosopher from){
        msgQueue.add(new Message(from));
    }
    void changeState(){
        while(msgQueue.isEmpty() == false){
            Message n = msgQueue.poll();
            ForkState state = states.get(n.sender);
            state.hasFork = true;
            state.isDirty = false;
        }

        states.forEach((neighbor, state)->{
            if(state.hasFork && state.isDirty){
                neighbor.receiveFork(this);
                state.hasFork = false;
                state.isDirty = false;                
            }
        });
    }
    
    int thinkCount = 0;
    void think() throws InterruptedException{ 
        if(isHungry)return;

        isHungry = true;
        Thread.sleep((int)(Math.random()*1000));
        System.out.println("Philosopher " + this + " has thought " + ++thinkCount + " times");    
    }
    static Object lock = new Object();
    void eat() throws InterruptedException{
        boolean canEat = states.values().stream().allMatch(state -> state.hasFork && !state.isDirty);
        if(canEat == false) return;

        // test 용
        synchronized(lock){
            assert(states.keySet().stream().allMatch(neighbor -> !neighbor.states.get(this).hasFork));
        }

        Thread.sleep((int)(Math.random()*1000));
        System.out.println("Philosopher " + this + " has eaten");
        states.forEach((neighbor, state)->{
            state.isDirty = true;
        });
        isHungry = false;

        // test 용
        synchronized(lock){
            assert(states.keySet().stream().allMatch(neighbor -> !neighbor.states.get(this).hasFork));
        }
    }
}
```

#### Drinking Problem

Drinking Problem 은 Dining Problem 의 일반화로 달라지는 점은 철학자가 배가 고플 때 이웃 간에 공유되는 포크들 중에 일부만 필요하고 그 집합이 배가 고플 때마다 달라지는 점이다. 용어가 헷갈릴 수 있어 논문에선 포크를 병으로 배고픔을 목마름으로 바꿔 표현하여 Drinking Problem 이 되었다.

이 문제의 해결방법은 Dining Problem 의 해결방법을 조금 수정한 것이다.

철학자는 [생각함, 배고픔, 먹음] 과 [조용함, 목마름, 마심] 의 두 상태를 가진다. 이 두 상태는 동기화 되기 위하여 다음과 같은 규칙을 갖는다.
1. (생각함 > 배고픔) 이 되기 위해선 목마름 상태어야 한다.
2. (배고픔 > 먹음)  이 되기 위해선 포크가 다 있어야 한다.(기존과 같다.)
3. (먹음 > 생각함)  이 되기 위해선 목이 마르지 않아야 한다.

포크의 움직임은 기존과 같고, 병의 움직임은 u, v 가 공유하는 병을 u 가 가진 경우 
1. 그 병이 u 에게 필요 없거나
2. u 가 마시는 중이 아니면서 u 가 포크를 가지지 않는 경우
u 가 v 에게 병을 줘야한다.

1번의 경우는 trivial 하고, 2 의 경우 포크가 더러우면 병을 줬다가 포크를 받고 곧 다시 병을 받게 된다. 반대로 포크가 깨끗하면 v 의 우선순위가 더 높으니 v 가 먹을 때 까지 기다리게 된다. v 는 식사를 위해서 포크를 모으고 병 역시 모으게 된다. 이는 v 보다 우선순위가 높은 곳에도 적용이 되어 우선순위가 높은 철학자부터 먹고 마시기를 하게 된다. 마침내 v 가 식사를 마치면 u 가 병을 받게 된다.5:Tfaf1,<h2 id="Dining-Philosopher"><a href="https://en.wikipedia.org/wiki/Dining_philosophers_problem">Dining Philosopher</a></h2>
<p>데드락을 설명하는 고전적인 예제이다. 데드락의 요건은 여러가지가 있는데 주로 자원점유와 순환성을 제거하여 해결한다.</p>
<h3 id="간단한-해결방안들">간단한 해결방안들</h3>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></svg></mjx-container> 명의 철학자가 있는 경우 최대 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2322.4 748" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(822.2,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1822.4,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></svg></mjx-container> 명의 철학자만 포크를 들면 순환이 생기지 않는다. 사전에 참가자 수를 모르면 쓸 수 없는 단점이 있다.</p>
<p>포크에 순서를 부여해 순서 대로 포크에 락을 걸면 순환이 생기지 않는다. 필요한 자원을 사전에 모르면 비효율적이게 되는 단점이 있다. 예를들어 3,5번을 얻고 2번을 얻어야 하는 걸 뒤늦게 알았을 경우 3,5를 풀고 다시 2,3,5를 얻어야하는 비효율적인 상황이 생길 수 있다.</p>
<h3 id="Lock-and-await">Lock and await</h3>
<p>아래는 직접 구현한 lock 과 conditional 을 사용해 식사하는 철학자 문제를 구현한 것이다.(ReentrantLock 을 쓰기 싫었다.) 큰 로직은 다익스트라 방법이랑 비슷하다. 필요한 포크가 없으면 점유를 푼 뒤 대기하고 이웃은 포크를 다 쓴 후 대기를 풀어준다. 점유를 푸는 로직이 빠져도 무조건 포크 두개를 동시에 들어야 해서 데드락은 걸리지 않지만 효율성이 떨어진다.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosohper;
public class Main {

  public static void main(String[] args) throws InterruptedException {
    Philosopher[] philosophers = new Philosopher[5];
    MyLock table = new MyLock();

    int cnt = 5;
    for (int i = 0; i < cnt; ++i)
      philosophers[i] = new Philosopher(table);
    for (int i = 0; i < cnt; ++i) {
      philosophers[i].setLeft(philosophers[(i - 1 + cnt) % cnt]);
      philosophers[i].setRight(philosophers[(i + 1) % cnt]);
      philosophers[i].start();
    }
    for (int i = 0; i < cnt; ++i)
      philosophers[i].join();
  }
}

">Main.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosohper;</span></span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> Main</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#F97583"> static</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> main</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">String</span><span style="color:#E1E4E8">[] </span><span style="color:#FFAB70">args</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#F97583">    Philosopher</span><span style="color:#E1E4E8">[] philosophers </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#F97583"> Philosopher</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">];</span></span>
<span data-line=""><span style="color:#E1E4E8">    MyLock table </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> MyLock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    int</span><span style="color:#E1E4E8"> cnt </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; </span><span style="color:#F97583">++</span><span style="color:#E1E4E8">i)</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Philosopher</span><span style="color:#E1E4E8">(table);</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; </span><span style="color:#F97583">++</span><span style="color:#E1E4E8">i) {</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">setLeft</span><span style="color:#E1E4E8">(philosophers[(i </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> +</span><span style="color:#E1E4E8"> cnt) </span><span style="color:#F97583">%</span><span style="color:#E1E4E8"> cnt]);</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">setRight</span><span style="color:#E1E4E8">(philosophers[(i </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">%</span><span style="color:#E1E4E8"> cnt]);</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">start</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; </span><span style="color:#F97583">++</span><span style="color:#E1E4E8">i)</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">join</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosohper;
public class MyBaseLock
{
    private volatile boolean isLocked = false;
    public synchronized void lock() throws InterruptedException{
        while(isLocked) wait();
        isLocked = true;
    }
    public synchronized void unlock(){
        isLocked = false;
        notify();
    }
    public synchronized void await(MyBaseLock lock2) throws InterruptedException
    {
        isLocked = true;
        while(isLocked) wait();
    }
}
">MyBaseLock.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosohper;</span></span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> MyBaseLock</span></span>
<span data-line=""><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> volatile</span><span style="color:#F97583"> boolean</span><span style="color:#E1E4E8"> isLocked </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> synchronized</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> lock</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException{</span></span>
<span data-line=""><span style="color:#F97583">        while</span><span style="color:#E1E4E8">(isLocked) </span><span style="color:#B392F0">wait</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        isLocked </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> synchronized</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> unlock</span><span style="color:#E1E4E8">(){</span></span>
<span data-line=""><span style="color:#E1E4E8">        isLocked </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#B392F0">        notify</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> synchronized</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> await</span><span style="color:#E1E4E8">(MyBaseLock </span><span style="color:#FFAB70">lock2</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#E1E4E8">        isLocked </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">        while</span><span style="color:#E1E4E8">(isLocked) </span><span style="color:#B392F0">wait</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosohper;
public class MyCondition {
    MyBaseLock mLock;
    MyBaseLock mPrivateLock = new MyBaseLock();
    public MyCondition(MyBaseLock lock)
    {
        mLock = lock;
    }
    public void signal() { mPrivateLock.unlock(); }
    public void await() throws InterruptedException { mLock.unlock(); mPrivateLock.await(mLock); mLock.lock();}
}
">MyCondition.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosohper;</span></span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> MyCondition</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">    MyBaseLock mLock;</span></span>
<span data-line=""><span style="color:#E1E4E8">    MyBaseLock mPrivateLock </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> MyBaseLock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> MyCondition</span><span style="color:#E1E4E8">(MyBaseLock </span><span style="color:#FFAB70">lock</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#E1E4E8">        mLock </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> lock;</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> signal</span><span style="color:#E1E4E8">() { mPrivateLock.</span><span style="color:#B392F0">unlock</span><span style="color:#E1E4E8">(); }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> await</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException { mLock.</span><span style="color:#B392F0">unlock</span><span style="color:#E1E4E8">(); mPrivateLock.</span><span style="color:#B392F0">await</span><span style="color:#E1E4E8">(mLock); mLock.</span><span style="color:#B392F0">lock</span><span style="color:#E1E4E8">();}</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosohper;
public class MyLock {
    MyBaseLock mLock = new MyBaseLock();
    public MyCondition newCondition(){
        return new MyCondition(mLock);
    }
    public void lock() throws InterruptedException {
        mLock.lock();
    }
    public void unlock() throws InterruptedException {
        mLock.unlock();
    }
}
">MyLock.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosohper;</span></span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> MyLock</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">    MyBaseLock mLock </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> MyBaseLock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#E1E4E8"> MyCondition </span><span style="color:#B392F0">newCondition</span><span style="color:#E1E4E8">(){</span></span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> MyCondition</span><span style="color:#E1E4E8">(mLock);</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> lock</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#E1E4E8">        mLock.</span><span style="color:#B392F0">lock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> unlock</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#E1E4E8">        mLock.</span><span style="color:#B392F0">unlock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosohper;

class Philosopher extends Thread {

  private int thinkCount;
  private volatile boolean eating;
  private Philosopher left;
  private Philosopher right;
  private MyCondition condition;
  final private MyLock table;

  public Philosopher(MyLock table) {
    eating = false;
    this.table = table;
    condition = table.newCondition();
  }

  public void setLeft(Philosopher left) { this.left = left; }
  public void setRight(Philosopher right) { this.right = right; }

  public void run() {
    try {
      while (true) {
        think();
        eat();
      }
    } catch (InterruptedException e) {}
  }

  private void think() throws InterruptedException {
    Thread.sleep((int)(Math.random()*1000));
    System.out.println(&#x22;Philosopher &#x22; + this + &#x22; has thought &#x22; + ++thinkCount + &#x22; times&#x22;);
  }

  private void eat() throws InterruptedException {
    try {
      table.lock();
      while (left.eating || right.eating)
        condition.await();

      assert !left.eating &#x26;&#x26; !right.eating;
      eating = true;
      
    } finally {
      table.unlock();
    }
    
    Thread.sleep((int)(Math.random()*1000));
    System.out.println(&#x22;Philosopher &#x22; + this + &#x22; has eaten&#x22;);
    eating = false;
    
    right.condition.signal();
    left.condition.signal();
  }
}
">Philosopher.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosohper;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">class</span><span style="color:#B392F0"> Philosopher</span><span style="color:#F97583"> extends</span><span style="color:#B392F0"> Thread</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#F97583"> int</span><span style="color:#E1E4E8"> thinkCount;</span></span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#F97583"> volatile</span><span style="color:#F97583"> boolean</span><span style="color:#E1E4E8"> eating;</span></span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#E1E4E8"> Philosopher left;</span></span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#E1E4E8"> Philosopher right;</span></span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#E1E4E8"> MyCondition condition;</span></span>
<span data-line=""><span style="color:#F97583">  final</span><span style="color:#F97583"> private</span><span style="color:#E1E4E8"> MyLock table;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#B392F0"> Philosopher</span><span style="color:#E1E4E8">(MyLock </span><span style="color:#FFAB70">table</span><span style="color:#E1E4E8">) {</span></span>
<span data-line=""><span style="color:#E1E4E8">    eating </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#79B8FF">    this</span><span style="color:#E1E4E8">.table </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> table;</span></span>
<span data-line=""><span style="color:#E1E4E8">    condition </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> table.</span><span style="color:#B392F0">newCondition</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> setLeft</span><span style="color:#E1E4E8">(Philosopher </span><span style="color:#FFAB70">left</span><span style="color:#E1E4E8">) { </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.left </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> left; }</span></span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> setRight</span><span style="color:#E1E4E8">(Philosopher </span><span style="color:#FFAB70">right</span><span style="color:#E1E4E8">) { </span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.right </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> right; }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> run</span><span style="color:#E1E4E8">() {</span></span>
<span data-line=""><span style="color:#F97583">    try</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">      while</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">) {</span></span>
<span data-line=""><span style="color:#B392F0">        think</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">        eat</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">      }</span></span>
<span data-line=""><span style="color:#E1E4E8">    } </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (InterruptedException </span><span style="color:#FFAB70">e</span><span style="color:#E1E4E8">) {}</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> think</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#E1E4E8">    Thread.</span><span style="color:#B392F0">sleep</span><span style="color:#E1E4E8">((</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">)(Math.</span><span style="color:#B392F0">random</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">*</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#E1E4E8">    System.out.</span><span style="color:#B392F0">println</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Philosopher "</span><span style="color:#F97583"> +</span><span style="color:#79B8FF"> this</span><span style="color:#F97583"> +</span><span style="color:#9ECBFF"> " has thought "</span><span style="color:#F97583"> +</span><span style="color:#F97583"> ++</span><span style="color:#E1E4E8">thinkCount </span><span style="color:#F97583">+</span><span style="color:#9ECBFF"> " times"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  private</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> eat</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#F97583">    try</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">      table.</span><span style="color:#B392F0">lock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">      while</span><span style="color:#E1E4E8"> (left.eating </span><span style="color:#F97583">||</span><span style="color:#E1E4E8"> right.eating)</span></span>
<span data-line=""><span style="color:#E1E4E8">        condition.</span><span style="color:#B392F0">await</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">      assert</span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">left.eating </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">right.eating;</span></span>
<span data-line=""><span style="color:#E1E4E8">      eating </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">      </span></span>
<span data-line=""><span style="color:#E1E4E8">    } </span><span style="color:#F97583">finally</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">      table.</span><span style="color:#B392F0">unlock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">    </span></span>
<span data-line=""><span style="color:#E1E4E8">    Thread.</span><span style="color:#B392F0">sleep</span><span style="color:#E1E4E8">((</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">)(Math.</span><span style="color:#B392F0">random</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">*</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#E1E4E8">    System.out.</span><span style="color:#B392F0">println</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Philosopher "</span><span style="color:#F97583"> +</span><span style="color:#79B8FF"> this</span><span style="color:#F97583"> +</span><span style="color:#9ECBFF"> " has eaten"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">    eating </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">    </span></span>
<span data-line=""><span style="color:#E1E4E8">    right.condition.</span><span style="color:#B392F0">signal</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    left.condition.</span><span style="color:#B392F0">signal</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<h3 id="Chandy/Misra-solution">Chandy/Misra solution</h3>
<p><a href="https://www.cs.utexas.edu/~misra/scannedPdf.dir/DrinkingPhil.pdf">이 논문</a>
의 내용이다.</p>
<p>특징은 lock 없이 가능하며 지역적 상태만 가지고 문제를 해결할 수 있어 분산 시스템에도 적용 가능한 방법이라는 것이다. 단점은 초기 상태가 특정 상태가 되어야 한다는 것이다.</p>
<p>아이디어는 DAG 를 만드는 것이다. 우선순위가 높은 프로세스에서 낮은 프로세스로 선이 이어진다. DAG 성격 상 이웃한 정점의 깊이는 다르기 때문에 conflict 가 발생하는 이웃 정점 간의 구분가능한 속성이 된다(<strong>distinguishability</strong> 만족). 그리고 어떠한 규칙에 따라 DAG 를 수정하면 임의의 정점의 깊이가 유한한 시간 안에 0이 되어 <strong>fairness</strong> 를 만족하게 된다.</p>
<p>자세히 들어가보자. 철학자는 세가지 속성을 갖는다. (논문에는 추가로 토큰이 있지만 생략하겠음.)</p>
<ol>
<li>철학자의 상태. 생각/배고픔/먹음의 세가지 상태가 있다.</li>
<li>포크를 들고있는지 여부.</li>
<li>포크가 더러운지 여부.</li>
</ol>
<p>포크의 더러움 여부가 다른 해결방안과의 차별점임에 주목하자. 이러한 임의의 철학자 u, v 는 서로 공유하는 포크를 다음의 규칙에 따라 가진다.</p>
<ol>
<li>u 가 먹는 상태가 아니고 깨끗한 포크를 들고 있으면 포크를 계속 가진다.</li>
<li>u 가 먹는 상태가 아니고 더러운 포크를 들고 있으면 포크를 깨끗하게 해서 v 에게 준다.</li>
<li>u 가 먹는 상태가 아니고 깨끗한 포크를 모두 들고 있으면 식사를 한다. 그 후 포크가 모두 더러워진다. (이는 두번째 규칙으로 이어진다.)</li>
</ol>
<p>위의 규칙을 살펴보면 임의의 철학자 u, v 에 대해서 u 가 우선적으로 포크를 갖는 경우는 다음과 같다. (나머지 경우는 v 가 우선순위를 갖는다.)</p>
<ul>
<li>u 가 포크를 들고 있고 포크가 깨끗하다.</li>
<li>v 가 포크를 들고 있고 포크가 더럽다.</li>
<li>v 가 포크를 u 로 보내는 중이다.</li>
</ul>
<p>임의의 철학자 u, v 에 대해서 u 가 포크에 대한 우선순위가 있을 때 u 에서 v 로 선이 이어진다고 하자. 이렇게 만든 그래프를 우선순위 그래프 H 라고 하자. 이 그래프는 세가지 특징이 있다.</p>
<ol>
<li>초기 상태가 DAG 를 만족하는 경우 이후에도 계속 DAG 이다. 증명은 간단한게 포크의 상태가 바뀔 때만 그래프가 변하는데 이때 모든 간선이 한 정점의 방향으로 가게 되어 순환이 생길 수 없기 때문이다.</li>
<li>유한한 시간 안에 H 가 바뀌어 임의의 프로세스 p 의 깊이가 0 가 된다. 증명은 깊이에 대한 수학적 귀납을 써야하는데 생략한다. 위 논문 참고.</li>
<li>H 그래프의 변경은 지역적으로 이루어진다.(한번에 한 정점과 그 이웃만 바뀐다.) 그래서 한 정점이 H 전체를 알 필요가 없어 분산 시스템을 가능하게 한다.</li>
</ol>
<p>위 로직은 다음을 만족하는데 참고로 적어둔다.</p>
<ul>
<li><strong>distinguishability</strong> 는 충돌이 일어날 때 적어도 하나 이상의 프로세스가 구분가능해야 한다는 것이다. 구분이 불가능하면 우리는 충돌 시 프로세스를 랜덤하게 선택할 수 밖에 없고 이는 곧 확률에 기반한 알고리즘이라는 말이 된다. 이를 위해 프로세스에 ID 같은 상태가 부여되어야 한다. 여기서는 우선순위 DAG H 상의 깊이를 사용한다.</li>
<li><strong>fairness</strong> 는 충돌이 일어날 때 유한한 시간 안에 모든 프로세스가 한번 이상 수행이 되어야한다는 것이다. 이를 위해선 프로세스에 부여한 상태 외의 시간 스탬프 같은 부가 상태를 사용할 수도 있지만 여기선 쓰지 않고 이 속성을 만족시킨다.</li>
</ul>
<h4 id="구현">구현</h4>
<p>위를 자바로 구현하면 다음과 같다. 아래 예제는 전형적인 원형 테이블이 아니라 모든 철학자들 간에 포크가 있도록 구성하였다. 이웃 설정하는 부분만 바꾸면 전형적인 원형 테이블로도 수행할 수 있다.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosopher2;
public class Main {

  public static void main(String[] args) throws InterruptedException {
    int cnt = 5;
    Philosopher[] philosophers = new Philosopher[cnt];

    for (int i = 0; i < cnt; ++i)
      philosophers[i] = new Philosopher();
    for(int i = 0; i < cnt; i++){
      for(int j = 0; j < cnt; j++){
        if(i == j) continue;
        philosophers[i].setNeighbor(philosophers[j], i < j);
      }
      philosophers[i].start();
    }
    for (int i = 0; i < cnt; ++i)
      philosophers[i].join();
  }
}
">Main.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosopher2;</span></span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> Main</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  public</span><span style="color:#F97583"> static</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> main</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">String</span><span style="color:#E1E4E8">[] </span><span style="color:#FFAB70">args</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException {</span></span>
<span data-line=""><span style="color:#F97583">    int</span><span style="color:#E1E4E8"> cnt </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    Philosopher</span><span style="color:#E1E4E8">[] philosophers </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#F97583"> Philosopher</span><span style="color:#E1E4E8">[cnt];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; </span><span style="color:#F97583">++</span><span style="color:#E1E4E8">i)</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i] </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Philosopher</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#F97583">      for</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> j </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; j </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; j</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8">(i </span><span style="color:#F97583">==</span><span style="color:#E1E4E8"> j) </span><span style="color:#F97583">continue</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">        philosophers[i].</span><span style="color:#B392F0">setNeighbor</span><span style="color:#E1E4E8">(philosophers[j], i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> j);</span></span>
<span data-line=""><span style="color:#E1E4E8">      }</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">start</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> cnt; </span><span style="color:#F97583">++</span><span style="color:#E1E4E8">i)</span></span>
<span data-line=""><span style="color:#E1E4E8">      philosophers[i].</span><span style="color:#B392F0">join</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="package dining_philosopher2;

import java.util.HashMap;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Philosopher extends Thread {
    class ForkState{
        public boolean hasFork, isDirty;
        ForkState(boolean fork){
            isDirty = true;
            hasFork = fork;
        }
    }
    class Message{
        public Philosopher sender;
        public int type;
        public Message(Philosopher sender){
            this.sender = sender;
        }
    }

    HashMap<Philosopher,Philosopher.ForkState> states = new HashMap<Philosopher,Philosopher.ForkState>();
    Queue<Message> msgQueue = new ConcurrentLinkedQueue<Message>();
    boolean isHungry = false;

    public void setNeighbor(Philosopher neighbor, boolean fork){
        states.put(neighbor, new ForkState(fork));
    }
    public void run() {
        try {
          while (true) {
            changeState();
            think();
            eat();
          }
        } catch (InterruptedException e) {}
      }

    void receiveFork(Philosopher from){
        msgQueue.add(new Message(from));
    }
    void changeState(){
        while(msgQueue.isEmpty() == false){
            Message n = msgQueue.poll();
            ForkState state = states.get(n.sender);
            state.hasFork = true;
            state.isDirty = false;
        }

        states.forEach((neighbor, state)->{
            if(state.hasFork &#x26;&#x26; state.isDirty){
                neighbor.receiveFork(this);
                state.hasFork = false;
                state.isDirty = false;                
            }
        });
    }
    
    int thinkCount = 0;
    void think() throws InterruptedException{ 
        if(isHungry)return;

        isHungry = true;
        Thread.sleep((int)(Math.random()*1000));
        System.out.println(&#x22;Philosopher &#x22; + this + &#x22; has thought &#x22; + ++thinkCount + &#x22; times&#x22;);    
    }
    static Object lock = new Object();
    void eat() throws InterruptedException{
        boolean canEat = states.values().stream().allMatch(state -> state.hasFork &#x26;&#x26; !state.isDirty);
        if(canEat == false) return;

        // test 용
        synchronized(lock){
            assert(states.keySet().stream().allMatch(neighbor -> !neighbor.states.get(this).hasFork));
        }

        Thread.sleep((int)(Math.random()*1000));
        System.out.println(&#x22;Philosopher &#x22; + this + &#x22; has eaten&#x22;);
        states.forEach((neighbor, state)->{
            state.isDirty = true;
        });
        isHungry = false;

        // test 용
        synchronized(lock){
            assert(states.keySet().stream().allMatch(neighbor -> !neighbor.states.get(this).hasFork));
        }
    }
}
">Philosopher.java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">package</span><span style="color:#E1E4E8"> dining_philosopher2;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> java.util.HashMap;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> java.util.Queue;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> java.util.concurrent.ConcurrentLinkedQueue;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> Philosopher</span><span style="color:#F97583"> extends</span><span style="color:#B392F0"> Thread</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">    class</span><span style="color:#B392F0"> ForkState</span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">        public</span><span style="color:#F97583"> boolean</span><span style="color:#E1E4E8"> hasFork, isDirty;</span></span>
<span data-line=""><span style="color:#B392F0">        ForkState</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">boolean</span><span style="color:#FFAB70"> fork</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#E1E4E8">            isDirty </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">            hasFork </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> fork;</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    class</span><span style="color:#B392F0"> Message</span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">        public</span><span style="color:#E1E4E8"> Philosopher sender;</span></span>
<span data-line=""><span style="color:#F97583">        public</span><span style="color:#F97583"> int</span><span style="color:#E1E4E8"> type;</span></span>
<span data-line=""><span style="color:#F97583">        public</span><span style="color:#B392F0"> Message</span><span style="color:#E1E4E8">(Philosopher </span><span style="color:#FFAB70">sender</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#79B8FF">            this</span><span style="color:#E1E4E8">.sender </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> sender;</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">    HashMap&#x3C;</span><span style="color:#F97583">Philosopher</span><span style="color:#E1E4E8">,</span><span style="color:#F97583">Philosopher</span><span style="color:#E1E4E8">.</span><span style="color:#F97583">ForkState</span><span style="color:#E1E4E8">> states </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#E1E4E8"> HashMap&#x3C;</span><span style="color:#F97583">Philosopher</span><span style="color:#E1E4E8">,</span><span style="color:#F97583">Philosopher</span><span style="color:#E1E4E8">.</span><span style="color:#F97583">ForkState</span><span style="color:#E1E4E8">>();</span></span>
<span data-line=""><span style="color:#E1E4E8">    Queue&#x3C;</span><span style="color:#F97583">Message</span><span style="color:#E1E4E8">> msgQueue </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#E1E4E8"> ConcurrentLinkedQueue&#x3C;</span><span style="color:#F97583">Message</span><span style="color:#E1E4E8">>();</span></span>
<span data-line=""><span style="color:#F97583">    boolean</span><span style="color:#E1E4E8"> isHungry </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> setNeighbor</span><span style="color:#E1E4E8">(Philosopher </span><span style="color:#FFAB70">neighbor</span><span style="color:#E1E4E8">, </span><span style="color:#F97583">boolean</span><span style="color:#FFAB70"> fork</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#E1E4E8">        states.</span><span style="color:#B392F0">put</span><span style="color:#E1E4E8">(neighbor, </span><span style="color:#F97583">new</span><span style="color:#B392F0"> ForkState</span><span style="color:#E1E4E8">(fork));</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> run</span><span style="color:#E1E4E8">() {</span></span>
<span data-line=""><span style="color:#F97583">        try</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">          while</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">true</span><span style="color:#E1E4E8">) {</span></span>
<span data-line=""><span style="color:#B392F0">            changeState</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">            think</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">            eat</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">          }</span></span>
<span data-line=""><span style="color:#E1E4E8">        } </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> (InterruptedException </span><span style="color:#FFAB70">e</span><span style="color:#E1E4E8">) {}</span></span>
<span data-line=""><span style="color:#E1E4E8">      }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    void</span><span style="color:#B392F0"> receiveFork</span><span style="color:#E1E4E8">(Philosopher </span><span style="color:#FFAB70">from</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#E1E4E8">        msgQueue.</span><span style="color:#B392F0">add</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Message</span><span style="color:#E1E4E8">(from));</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    void</span><span style="color:#B392F0"> changeState</span><span style="color:#E1E4E8">(){</span></span>
<span data-line=""><span style="color:#F97583">        while</span><span style="color:#E1E4E8">(msgQueue.</span><span style="color:#B392F0">isEmpty</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#E1E4E8">            Message n </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> msgQueue.</span><span style="color:#B392F0">poll</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">            ForkState state </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> states.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(n.sender);</span></span>
<span data-line=""><span style="color:#E1E4E8">            state.hasFork </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">            state.isDirty </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        states.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((neighbor, state)</span><span style="color:#F97583">-></span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">            if</span><span style="color:#E1E4E8">(state.hasFork </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#E1E4E8"> state.isDirty){</span></span>
<span data-line=""><span style="color:#E1E4E8">                neighbor.</span><span style="color:#B392F0">receiveFork</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">                state.hasFork </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">                state.isDirty </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;                </span></span>
<span data-line=""><span style="color:#E1E4E8">            }</span></span>
<span data-line=""><span style="color:#E1E4E8">        });</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">    </span></span>
<span data-line=""><span style="color:#F97583">    int</span><span style="color:#E1E4E8"> thinkCount </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    void</span><span style="color:#B392F0"> think</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException{ </span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8">(isHungry)</span><span style="color:#F97583">return</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        isHungry </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">        Thread.</span><span style="color:#B392F0">sleep</span><span style="color:#E1E4E8">((</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">)(Math.</span><span style="color:#B392F0">random</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">*</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#E1E4E8">        System.out.</span><span style="color:#B392F0">println</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Philosopher "</span><span style="color:#F97583"> +</span><span style="color:#79B8FF"> this</span><span style="color:#F97583"> +</span><span style="color:#9ECBFF"> " has thought "</span><span style="color:#F97583"> +</span><span style="color:#F97583"> ++</span><span style="color:#E1E4E8">thinkCount </span><span style="color:#F97583">+</span><span style="color:#9ECBFF"> " times"</span><span style="color:#E1E4E8">);    </span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    static</span><span style="color:#E1E4E8"> Object lock </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Object</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">    void</span><span style="color:#B392F0"> eat</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">throws</span><span style="color:#E1E4E8"> InterruptedException{</span></span>
<span data-line=""><span style="color:#F97583">        boolean</span><span style="color:#E1E4E8"> canEat </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> states.</span><span style="color:#B392F0">values</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">stream</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">allMatch</span><span style="color:#E1E4E8">(state </span><span style="color:#F97583">-></span><span style="color:#E1E4E8"> state.hasFork </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">state.isDirty);</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8">(canEat </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">return</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">        // test 용</span></span>
<span data-line=""><span style="color:#F97583">        synchronized</span><span style="color:#E1E4E8">(lock){</span></span>
<span data-line=""><span style="color:#B392F0">            assert</span><span style="color:#E1E4E8">(states.</span><span style="color:#B392F0">keySet</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">stream</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">allMatch</span><span style="color:#E1E4E8">(neighbor </span><span style="color:#F97583">-></span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">neighbor.states.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">).hasFork));</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        Thread.</span><span style="color:#B392F0">sleep</span><span style="color:#E1E4E8">((</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">)(Math.</span><span style="color:#B392F0">random</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">*</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#E1E4E8">        System.out.</span><span style="color:#B392F0">println</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Philosopher "</span><span style="color:#F97583"> +</span><span style="color:#79B8FF"> this</span><span style="color:#F97583"> +</span><span style="color:#9ECBFF"> " has eaten"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">        states.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((neighbor, state)</span><span style="color:#F97583">-></span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#E1E4E8">            state.isDirty </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">        });</span></span>
<span data-line=""><span style="color:#E1E4E8">        isHungry </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">        // test 용</span></span>
<span data-line=""><span style="color:#F97583">        synchronized</span><span style="color:#E1E4E8">(lock){</span></span>
<span data-line=""><span style="color:#B392F0">            assert</span><span style="color:#E1E4E8">(states.</span><span style="color:#B392F0">keySet</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">stream</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">allMatch</span><span style="color:#E1E4E8">(neighbor </span><span style="color:#F97583">-></span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">neighbor.states.</span><span style="color:#B392F0">get</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">).hasFork));</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<h4 id="Drinking-Problem">Drinking Problem</h4>
<p>Drinking Problem 은 Dining Problem 의 일반화로 달라지는 점은 철학자가 배가 고플 때 이웃 간에 공유되는 포크들 중에 일부만 필요하고 그 집합이 배가 고플 때마다 달라지는 점이다. 용어가 헷갈릴 수 있어 논문에선 포크를 병으로 배고픔을 목마름으로 바꿔 표현하여 Drinking Problem 이 되었다.</p>
<p>이 문제의 해결방법은 Dining Problem 의 해결방법을 조금 수정한 것이다.</p>
<p>철학자는 [생각함, 배고픔, 먹음] 과 [조용함, 목마름, 마심] 의 두 상태를 가진다. 이 두 상태는 동기화 되기 위하여 다음과 같은 규칙을 갖는다.</p>
<ol>
<li>(생각함 > 배고픔) 이 되기 위해선 목마름 상태어야 한다.</li>
<li>(배고픔 > 먹음)  이 되기 위해선 포크가 다 있어야 한다.(기존과 같다.)</li>
<li>(먹음 > 생각함)  이 되기 위해선 목이 마르지 않아야 한다.</li>
</ol>
<p>포크의 움직임은 기존과 같고, 병의 움직임은 u, v 가 공유하는 병을 u 가 가진 경우</p>
<ol>
<li>그 병이 u 에게 필요 없거나</li>
<li>u 가 마시는 중이 아니면서 u 가 포크를 가지지 않는 경우
u 가 v 에게 병을 줘야한다.</li>
</ol>
<p>1번의 경우는 trivial 하고, 2 의 경우 포크가 더러우면 병을 줬다가 포크를 받고 곧 다시 병을 받게 된다. 반대로 포크가 깨끗하면 v 의 우선순위가 더 높으니 v 가 먹을 때 까지 기다리게 된다. v 는 식사를 위해서 포크를 모으고 병 역시 모으게 된다. 이는 v 보다 우선순위가 높은 곳에도 적용이 되어 우선순위가 높은 철학자부터 먹고 마시기를 하게 된다. 마침내 v 가 식사를 마치면 u 가 병을 받게 된다.</p><style>
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
</style>a:["categories","programming/pattern/concurrency/dining-philosopher","c"]
0:["ofI6ekF04a9RogauCpCOH",[[["",{"children":["blog",{"children":[["categories","programming/pattern/concurrency/dining-philosopher","c"],{"children":["__PAGE__?{\"categories\":[\"programming\",\"pattern\",\"concurrency\",\"dining-philosopher\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","programming/pattern/concurrency/dining-philosopher","c"],{"children":["__PAGE__",{},[["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"Dining Philosopher"}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/programming/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"programming"}]]}],["$","div","/blog/programming/pattern/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"pattern"}]]}],["$","div","/blog/programming/pattern/concurrency/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"concurrency"}]]}],["$","div","/blog/programming/pattern/concurrency/dining-philosopher/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency/dining-philosopher/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"dining-philosopher"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"8/23/2024"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","section",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["concurrency"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-color-border tw-border-2 ","children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 tw-text-color-border","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"$undefined"}]]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency/concurrency-parallelism","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"Patterns for Concurrency Programming"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency/concurrency-parallelism","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":["$undefined",["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Patterns for Concurrency Programming"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Concurrency Programming 에서 쓰이는 도구와 쉽게 범할 요류들 정리"}]]}]]}]}]}]}]]}]]}]]}],[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/d1ab85c59d8dbdc1.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$a","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null],null]},[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/dd7e91777d3df03c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/study-log/_next/static/css/a40a511565153bc1.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){try{(null==localStorage.getItem(\"theme\")&&window.matchMedia(\"(prefers-color-scheme: dark)\").matches||\"dark\"==localStorage.getItem(\"theme\"))&&document.documentElement.setAttribute(\"data-theme\",\"dark\")}catch(e){}})()"}}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Gothic+A1&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$Lc",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$Ld",null,{}],["$","$L2",null,{"className":"tw-self-center tw-ml-1 tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl hover:tw-text-color-text","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"LOG | STUDY"}],["$","div",null,{"className":"tw-grow"}],["$","$Le",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$Lf",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L10",null,{}],["$","aside",null,{"children":["$","$L11",null,{"children":["$","div",null,{"className":"sidebar_sidebar__gN2ma","children":[["$","$L12",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","$L12",null,{"slug":"/portfolio","label":"PORTFOLIO★","refCount":-1,"depth":0}],["$","$L12",null,{"slug":"/tags","label":"TAGS","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$L12","/blog",{"slug":"/blog","label":"BLOG","refCount":23,"depth":0,"children":[["$","$L12","/blog/ps",{"slug":"/blog/ps","label":"PS","refCount":1,"depth":1,"children":"$undefined"}],["$","$L12","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":1,"depth":1,"children":"$undefined"}],["$","$L12","/blog/computer-science",{"slug":"/blog/computer-science","label":"COMPUTER-SCIENCE","refCount":5,"depth":1,"children":[["$","$L12","/blog/computer-science/graphics",{"slug":"/blog/computer-science/graphics","label":"GRAPHICS","refCount":3,"depth":2,"children":"$undefined"}],["$","$L12","/blog/computer-science/algorithm",{"slug":"/blog/computer-science/algorithm","label":"ALGORITHM","refCount":2,"depth":2,"children":"$undefined"}]]}],["$","$L12","/blog/programming",{"slug":"/blog/programming","label":"PROGRAMMING","refCount":16,"depth":1,"children":[["$","$L12","/blog/programming/cpp",{"slug":"/blog/programming/cpp","label":"CPP","refCount":1,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/pattern",{"slug":"/blog/programming/pattern","label":"PATTERN","refCount":6,"depth":2,"children":[["$","$L12","/blog/programming/pattern/concurrency",{"slug":"/blog/programming/pattern/concurrency","label":"CONCURRENCY","refCount":2,"depth":3,"children":"$undefined"}]]}],["$","$L12","/blog/programming/web",{"slug":"/blog/programming/web","label":"WEB","refCount":3,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/wpf",{"slug":"/blog/programming/wpf","label":"WPF","refCount":4,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/tips",{"slug":"/blog/programming/tips","label":"TIPS","refCount":2,"depth":2,"children":"$undefined"}]]}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$L13",null,{"children":["$","$L14",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pb-52","children":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95 tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4 mobile:tw-flex-col dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","$L2",null,{"className":"tw-flex tw-self-center","href":"https://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2024 Mona04. Powered by ",["$","$L2",null,{"className":"$undefined","href":"https://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","prefetch":false,"children":"NextJS"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto mobile:tw-hidden","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"18:16"}],["$","div",null,{"className":"tw-ml-1","children":"2024/12/6"}]]}]]}]}]}]]}],["$","$L15",null,{}]]}]}]],null],null],["$L16",null]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Dining Philosopher"}],["$","meta","3",{"name":"description","content":"Dining Philosopher 관련 정리"}],["$","link","4",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","5",{"name":"author","content":"Mona04"}],["$","meta","6",{"name":"category","content":"/blog/programming/pattern/concurrency/dining-philosopher"}],["$","link","7",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/programming/pattern/concurrency/dining-philosopher"}],["$","link","8",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
