2:I[5250,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
3:I[8646,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
6:I[1558,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
7:I[4507,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
8:I[4626,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],"WithTooltip"]
9:I[3991,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
a:I[5613,[],""]
c:I[1778,[],""]
d:I[198,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],"ContextProvider"]
e:I[5990,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
f:I[8427,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
10:I[1052,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
11:I[7380,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
12:I[6960,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
13:I[9961,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
14:I[3915,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
15:I[23,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-c29964064eab9b40.js"],""]
4:T13c6,
이 글은 Concurrency Programming 을 하면서 사용하게 되는 패턴들과 쉽게 범할 오류들을 공부하며 정리하는 글입니다.

## Lock

### Primitives

multithread programming 에서는 critical section 문제가 생기고 이를 위해서 semaphore, mutex, conditional variable 이라는 개념이 만들어졌다. 이들은 kernal 에서 운영체제와 하드웨어의 지원을 받아 구현되며 환경마다 구현방법이 다르다. 이에 대해선 아래를 참고.

<iframe width="560" height="315" src="https://www.youtube.com/embed/VxVF6QzwtwI?si=6iDSUkaWckzT5pSi" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

이를 기초로 해서 monitor 같이 더 복잡한 기능이 구현된다.

### Extension

monitor 는 java 나 c# 의 프레임워크 차원에서 제공하는 기능으로 process 안에서의 mutex 와 conditional variable 기능을 지원한다. process 간에는 적용되지 않으므로 파일 시스템 등에는 적절하지 않고 대신 더 빠르다.[^so-mutex-vs-monitor]


### Memory Model

Memory Model 이 환경마다 다르므로 주의할 필요가 있다.

+ c 환경에서 힙에 있는 값을 변경하면 모든 스레드에 적용이 된다. 
+ [Java Memory Model](https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html) 에서는 ```volatile``` 키워드를 쓰는 등의 방법을 쓰지 않으면 보장이 되지 않는다. 다시말해 read 에도 스레드 동기화가 필요하다는 말이다. 또한 Constructor 가 호출되기 전에 외부스레드가 인스턴스에 접근할 수도 있어서 주의해야한다.[^so1]


### 주의사항

#### Dead Lock

기본적으로 두 개 이상의 lock 을 가지면 생길 수 있는 Dead Lock 은 두가지 규칙만 지키면 예방은 할 수 있다.
1. 두개 이상의 lock 을 건다면 lock 의 순서를 부여하여 그 순서대로만 한다. 
2. lock 을 걸고 외부 함수를 호출하는 경우 잠재적으로 위 규칙을 깰 수 있으니 자제한다.

lock 을 걸면 안정성 테스트도 힘들어서 가능하면 lock 을 최소화하는게 좋다. 예를 들어서 race condition 이 있는 list 에 대해 루프를 돈다면 그 전체를 lock 걸고 복사한 뒤 이 복사본에 대해 루프를 도는게 좋다.

유사품으로 live lock 이 있다.

#### Try Catch

```java
mylock.lock();
try{
    ...
} finally { table.unlock();}
```

lock/unlock 을 각각 호출하는 경우 ```try...finally``` 문으로 예외가 일어나도 반드시 unlock 을 할 수 있도록 해야한다.

#### Spurious Wakeup

```java
synchronized(this){
    while(isValidCondition) // wake 후 Condition 을 반드시 체크해야하므로 if 로 대체 불가능.
        wait();
}
```

wait 시 의도하지 않았는데 Thread 가 깨어나는 [__spurious wakeup__](https://en.wikipedia.org/wiki/Spurious_wakeup) 을 유의하여 wakeup 이후에 Condition 을 다시 체크해야한다. 그래서 위처럼 ```while``` 문처럼 반복문을 사용하여 구현한다. 그렇지 않으면 의도치 않은 wakeup 이 발생한 경우 공유자원에 여러 스레드가 접근하게 되어 프로그램이 오작동을 할 수 있다.

### Patterns

copy on write array list. 내부 리스트 값을 변경할 때 카피 본을 생성하고 외부에서 루프를 돌 때는 카피본에 대해서 돌게하여 루프 시에 lock 을 걸지 않도록 해준다. 대신 수정이 잦으면 copy 때문에 더 느릴 수 있다.

#### Thread Pool

Thread 의 생성 비용 및 과도한 생성을 막는 패턴이다. 이는 다양한 패턴으로 분화된다.

분할정복을 위한 fork/join pool, 

#### [Double Checked Pattern](https://en.wikipedia.org/wiki/Double-checked_locking)

잘못쓰면 잡기 힘든 오류를 만들어내는 안티패턴이다. 대개 싱글톤에서 사용되므로 직접 구현하기 보단 안전하다고 판명된 코드를 쓰는게 편하다.

#### Producer Consumer Pattern

Producer 와 Consummer 사이를 concurrency 를 지원하는 queue 로 연결해서 multi-threads 의 이점을 살리는 패턴이다. 이때 Producer 의 생산 속도가 너무 빠르면 메모리가 부족할 수 있으므로 둘 사이의 속도를 조절하는게 중요하다. java 에서는 ```ArrayBlockingQueue``` 가 이를 지원하는 예이다.

#### Lock Striping

HashMap 의 Atomicity 최적화 기법. Container 전체가 아니라 Bucket 마다 lock 을 걸게 해서 높은 수준의 병렬성을 지원한다.

0.

## 참고자료

[7가지 동시성 모델, 폴 부처](https://m.hanbit.co.kr/store/books/book_view.html?p_code=B3745244799)

[^so1]:[java constructor and thread safety, so](https://stackoverflow.com/questions/61803042/java-constructors-and-thread-safety)

[^so-mutex-vs-monitor]:[mutex vs montior, so](https://stackoverflow.com/questions/38159668/monitor-vs-mutex)5:T205f,<p>이 글은 Concurrency Programming 을 하면서 사용하게 되는 패턴들과 쉽게 범할 오류들을 공부하며 정리하는 글입니다.</p>
<h2 id="Lock">Lock</h2>
<h3 id="Primitives">Primitives</h3>
<p>multithread programming 에서는 critical section 문제가 생기고 이를 위해서 semaphore, mutex, conditional variable 이라는 개념이 만들어졌다. 이들은 kernal 에서 운영체제와 하드웨어의 지원을 받아 구현되며 환경마다 구현방법이 다르다. 이에 대해선 아래를 참고.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/VxVF6QzwtwI?si=6iDSUkaWckzT5pSi" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
<p>이를 기초로 해서 monitor 같이 더 복잡한 기능이 구현된다.</p>
<h3 id="Extension">Extension</h3>
<p>monitor 는 java 나 c# 의 프레임워크 차원에서 제공하는 기능으로 process 안에서의 mutex 와 conditional variable 기능을 지원한다. process 간에는 적용되지 않으므로 파일 시스템 등에는 적절하지 않고 대신 더 빠르다.<sup><a href="#user-content-fn-so-mutex-vs-monitor" id="user-content-fnref-so-mutex-vs-monitor" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup></p>
<h3 id="Memory-Model">Memory Model</h3>
<p>Memory Model 이 환경마다 다르므로 주의할 필요가 있다.</p>
<ul>
<li>c 환경에서 힙에 있는 값을 변경하면 모든 스레드에 적용이 된다.</li>
<li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html">Java Memory Model</a> 에서는 <code>volatile</code> 키워드를 쓰는 등의 방법을 쓰지 않으면 보장이 되지 않는다. 다시말해 read 에도 스레드 동기화가 필요하다는 말이다. 또한 Constructor 가 호출되기 전에 외부스레드가 인스턴스에 접근할 수도 있어서 주의해야한다.<sup><a href="#user-content-fn-so1" id="user-content-fnref-so1" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup></li>
</ul>
<h3 id="주의사항">주의사항</h3>
<h4 id="Dead-Lock">Dead Lock</h4>
<p>기본적으로 두 개 이상의 lock 을 가지면 생길 수 있는 Dead Lock 은 두가지 규칙만 지키면 예방은 할 수 있다.</p>
<ol>
<li>두개 이상의 lock 을 건다면 lock 의 순서를 부여하여 그 순서대로만 한다.</li>
<li>lock 을 걸고 외부 함수를 호출하는 경우 잠재적으로 위 규칙을 깰 수 있으니 자제한다.</li>
</ol>
<p>lock 을 걸면 안정성 테스트도 힘들어서 가능하면 lock 을 최소화하는게 좋다. 예를 들어서 race condition 이 있는 list 에 대해 루프를 돈다면 그 전체를 lock 걸고 복사한 뒤 이 복사본에 대해 루프를 도는게 좋다.</p>
<p>유사품으로 live lock 이 있다.</p>
<h4 id="Try-Catch">Try Catch</h4>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="mylock.lock();
try{
    ...
} finally { table.unlock();}
">java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">mylock.</span><span style="color:#B392F0">lock</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">try</span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#E1E4E8">    ...</span></span>
<span data-line=""><span style="color:#E1E4E8">} </span><span style="color:#F97583">finally</span><span style="color:#E1E4E8"> { table.</span><span style="color:#B392F0">unlock</span><span style="color:#E1E4E8">();}</span></span></code></pre></figure>
<p>lock/unlock 을 각각 호출하는 경우 <code>try...finally</code> 문으로 예외가 일어나도 반드시 unlock 을 할 수 있도록 해야한다.</p>
<h4 id="Spurious-Wakeup">Spurious Wakeup</h4>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="java" data-theme="github-dark" data-code="synchronized(this){
    while(isValidCondition) // wake 후 Condition 을 반드시 체크해야하므로 if 로 대체 불가능.
        wait();
}
">java<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="java" data-theme="github-dark"><code data-language="java" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">synchronized</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">){</span></span>
<span data-line=""><span style="color:#F97583">    while</span><span style="color:#E1E4E8">(isValidCondition) </span><span style="color:#6A737D">// wake 후 Condition 을 반드시 체크해야하므로 if 로 대체 불가능.</span></span>
<span data-line=""><span style="color:#B392F0">        wait</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<p>wait 시 의도하지 않았는데 Thread 가 깨어나는 <a href="https://en.wikipedia.org/wiki/Spurious_wakeup"><strong>spurious wakeup</strong></a> 을 유의하여 wakeup 이후에 Condition 을 다시 체크해야한다. 그래서 위처럼 <code>while</code> 문처럼 반복문을 사용하여 구현한다. 그렇지 않으면 의도치 않은 wakeup 이 발생한 경우 공유자원에 여러 스레드가 접근하게 되어 프로그램이 오작동을 할 수 있다.</p>
<h3 id="Patterns">Patterns</h3>
<p>copy on write array list. 내부 리스트 값을 변경할 때 카피 본을 생성하고 외부에서 루프를 돌 때는 카피본에 대해서 돌게하여 루프 시에 lock 을 걸지 않도록 해준다. 대신 수정이 잦으면 copy 때문에 더 느릴 수 있다.</p>
<h4 id="Thread-Pool">Thread Pool</h4>
<p>Thread 의 생성 비용 및 과도한 생성을 막는 패턴이다. 이는 다양한 패턴으로 분화된다.</p>
<p>분할정복을 위한 fork/join pool,</p>
<h4 id="Double-Checked-Pattern"><a href="https://en.wikipedia.org/wiki/Double-checked_locking">Double Checked Pattern</a></h4>
<p>잘못쓰면 잡기 힘든 오류를 만들어내는 안티패턴이다. 대개 싱글톤에서 사용되므로 직접 구현하기 보단 안전하다고 판명된 코드를 쓰는게 편하다.</p>
<h4 id="Producer-Consumer-Pattern">Producer Consumer Pattern</h4>
<p>Producer 와 Consummer 사이를 concurrency 를 지원하는 queue 로 연결해서 multi-threads 의 이점을 살리는 패턴이다. 이때 Producer 의 생산 속도가 너무 빠르면 메모리가 부족할 수 있으므로 둘 사이의 속도를 조절하는게 중요하다. java 에서는 <code>ArrayBlockingQueue</code> 가 이를 지원하는 예이다.</p>
<h4 id="Lock-Striping">Lock Striping</h4>
<p>HashMap 의 Atomicity 최적화 기법. Container 전체가 아니라 Bucket 마다 lock 을 걸게 해서 높은 수준의 병렬성을 지원한다.</p>
<ol start="0">
<li></li>
</ol>
<h2 id="참고자료">참고자료</h2>
<p><a href="https://m.hanbit.co.kr/store/books/book_view.html?p_code=B3745244799">7가지 동시성 모델, 폴 부처</a></p>
<section data-footnotes="" class="footnotes"><h2 class="sr-only" id="Footnotes">Footnotes</h2>
<ol>
<li id="user-content-fn-so-mutex-vs-monitor">
<p><a href="https://stackoverflow.com/questions/38159668/monitor-vs-mutex">mutex vs montior, so</a> <a href="#user-content-fnref-so-mutex-vs-monitor" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-so1">
<p><a href="https://stackoverflow.com/questions/61803042/java-constructors-and-thread-safety">java constructor and thread safety, so</a> <a href="#user-content-fnref-so1" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>b:["categories","programming/pattern/concurrency","c"]
0:["o1uHSUlJjKEbi2esNIGiV",[[["",{"children":["blog",{"children":[["categories","programming/pattern/concurrency","c"],{"children":["__PAGE__?{\"categories\":[\"programming\",\"pattern\",\"concurrency\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","programming/pattern/concurrency","c"],{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"Patterns for Concurrency Programming"}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/programming/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"programming"}]]}],["$","div","/blog/programming/pattern/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"pattern"}]]}],["$","div","/blog/programming/pattern/concurrency/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"concurrency"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"4/29/2024"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","section",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["design pattern","concurrency"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/flutter-di","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"How DI works in Flutter."}]]}]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/mvvm-disign-pattern","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"MVVM 에서 사용하는 Design Pattern"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/mvvm-disign-pattern","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"MVVM 에서 사용하는 Design Pattern"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":""}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/flutter-di","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"How DI works in Flutter."}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Flutter 의 Provider Pattern 이 어떻게 구현되는지 살펴보기."}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/observable","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Observable 에 관한 메모"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Observable 의 여러 기능. Hot/Cold Stream , 스레드 동기화 등"}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/dto","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"DTO"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Data Transport Object 의 역할"}]]}]]}]}]}]}]]}]]}]]}],null]]},[null,["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/601f73c9b9392328.css","precedence":"next","crossOrigin":""}]]}],null]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){try{(null==localStorage.getItem(\"theme\")&&window.matchMedia(\"(prefers-color-scheme: dark)\").matches||\"dark\"==localStorage.getItem(\"theme\"))&&document.documentElement.setAttribute(\"data-theme\",\"dark\")}catch(e){}})()"}}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$Ld",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$Le",null,{}],["$","$L2",null,{"className":"tw-self-center tw-ml-1 tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl hover:tw-text-color-text","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"LOG | STUDY"}],["$","div",null,{"className":"tw-grow"}],["$","$Lf",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$L10",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L11",null,{}],["$","aside",null,{"children":["$","$L12",null,{"children":["$","div",null,{"className":"sidebar_sidebar__gN2ma","children":[["$","$L13",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/portfolio","label":"PORTFOLIO★","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/tags","label":"TAGS","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$L13","/blog",{"slug":"/blog","label":"BLOG","refCount":16,"depth":0,"children":[["$","$L13","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":2,"depth":1,"children":"$undefined"}],["$","$L13","/blog/computer-science",{"slug":"/blog/computer-science","label":"COMPUTER-SCIENCE","refCount":3,"depth":1,"children":[["$","$L13","/blog/computer-science/graphics",{"slug":"/blog/computer-science/graphics","label":"GRAPHICS","refCount":3,"depth":2,"children":"$undefined"}]]}],["$","$L13","/blog/programming",{"slug":"/blog/programming","label":"PROGRAMMING","refCount":11,"depth":1,"children":[["$","$L13","/blog/programming/pattern",{"slug":"/blog/programming/pattern","label":"PATTERN","refCount":5,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/web",{"slug":"/blog/programming/web","label":"WEB","refCount":3,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/wpf",{"slug":"/blog/programming/wpf","label":"WPF","refCount":2,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/tips",{"slug":"/blog/programming/tips","label":"TIPS","refCount":1,"depth":2,"children":"$undefined"}]]}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$L14",null,{"children":["$","$L15",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pb-52","children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95 tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4 mobile:tw-flex-col dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","$L2",null,{"className":"tw-flex tw-self-center","href":"https://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2024 Mona04. Powered by ",["$","$L2",null,{"className":"$undefined","href":"https://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","prefetch":false,"children":"NextJS"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto mobile:tw-hidden","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"13:37"}],["$","div",null,{"className":"tw-ml-1","children":"2024/7/25"}]]}]]}]}]}]]}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){if(document)for(let e of document.querySelectorAll(\"[data-rehype-pretty-code-title]\"))for(let a of e.getElementsByTagName(\"button\"))a.addEventListener(\"click\",function(){if(navigator.clipboard){var n=e.getAttribute(\"data-code\");null!=n&&(navigator.clipboard.writeText(n),a.setAttribute(\"checked\",\"true\"),a.disabled=!0),setTimeout(()=>{a.removeAttribute(\"checked\"),a.disabled=!1},2e3)}})})()"},"defer":true}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/cd17a881c562f544.css","precedence":"next","crossOrigin":""}]],"$L16"]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Patterns for Concurrency Programming"}],["$","meta","3",{"name":"description","content":"Concurrency Programming 에서 쓰이는 패턴과 쉽게 범할 요류들 정리"}],["$","link","4",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","5",{"name":"author","content":"Mona04"}],["$","meta","6",{"name":"category","content":"/blog/programming/pattern/concurrency"}],["$","link","7",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/programming/pattern/concurrency"}],["$","link","8",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
