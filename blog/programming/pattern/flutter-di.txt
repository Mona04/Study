2:I[5250,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
3:I[8646,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
6:I[1558,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
7:I[4507,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
8:I[4626,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],"WithTooltip"]
9:I[3991,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-2d7f5d148069f3b7.js","631","static/chunks/app/blog/%5B...categories%5D/page-6064fb54ffd69185.js"],""]
a:I[5613,[],""]
c:I[1778,[],""]
d:I[198,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],"ContextProvider"]
e:I[5990,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
f:I[8427,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
10:I[1052,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
11:I[7380,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
12:I[6960,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
13:I[9961,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
14:I[3915,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
15:I[23,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-2d7f5d148069f3b7.js","185","static/chunks/app/layout-d70e8fdef73acd5c.js"],""]
4:T1336,

## flutter and react

flutter 는 js react 와 비슷한 면이 꽤 있다.

js react 는 virtual dom 과 코드 상의 HTML element 를 분리하여 성능과 개별편의를 둘다 잡았다.
flutter 도 마찬가지로 element 와 widget 이라는 흡사한 개념을 사용하고 있다. 

DI 를 위한 기능도 비슷하게 지원하고 있다. 
react 에서는 context provider 를 사용해 부모 노드 쪽에 필요한 서비스를 넣어두고 자식 노드에서 해당 서비스들을 가져올 수 있다.
flutter 에서는 [InheritedWidget](https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html) 을 통해 부모 노드에 등록한 서비스를 자식 노드에서 빠르게 가져올 수 있다.

react 를 써봤다면 이제 flutter 에서의 di 가 어떨지 대충 감이 잡혔을거라 생각한다.


## My Provider Example

flutter 친화적인 di 를 간단하게 만들어보자.

샘플은 한 버튼과 그 버튼을 클릭한 횟수가 전시되는 텍스트로 이루어진 한 화면을 갖고 있다.

기능이 단순하므로 view model 에서 클릭한 횟수를 관리하고 view 는 버튼클릭 시의 적절한 함수를 호출하고 클릭 횟수를 조회만 하도록 하자.

이를 위해 Provider 를 간단하게 구현했다.

```dart title="my_provider.dart"
import 'package:flutter/material.dart';

class MyProvider<T extends Listenable> extends InheritedNotifier<T>{
  MyProvider(
    {super.key, 
    required T Function() create,
    required super.child}) 
    : super(notifier: create());

  static T of<T extends Listenable>(BuildContext context)
    => context.dependOnInheritedWidgetOfExactType<MyProvider<T>>()!.notifier!;
}

```

상속을 하고 있는 ```InheritedNotifier``` 가 중요하다. 이 클래스는 ```Widget``` 이면서 특별한 기능을 가지고 있다. 바로 생성자에서 ```Listenable``` 인 ```notifier``` 를 받아서 신호를 받으면 자기 자신을 다시 그리게 하는 기능이다.

```dependOnInheritedWidgetOfExactType()``` 를 호출하는 것도 중요하다. 이 함수를 통해 flutter 에서는 ```BuildContext``` 만 있으면 상수 시간 내에 ```InheritedWidget``` 을 찾을 수 있다. 위 코드는 편의를 위해 전역함수로 한번 감싼걸 확인할 수 있다. 많이 쓰이는 패턴이다.

그럼 실제 어떻게 사용하는지 살펴보자.


```dart title="main.dart"
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      home: MyProvider<TouchCounterVM>(
        create: () => TouchCounterVM(), 
        child: const TouchCounterV())
    );
  }
}

```

위 코드는 위젯 트리의 가장 윗부분을 보여주고 있다. 
스스로 역시 위젯인 Provider 를 사용해 ```TouchCounterVM``` 을 하위 위젯인 ```TouchCounterV``` 에서 참조할 수 있도록 한다.

다음은 view 와 view model 을 살펴보자.



```dart title="view_model.dart"
import 'package:flutter/material.dart';

class TouchCounterVM  with ChangeNotifier{
  int count = 0;

  void onClick(){
    count++;
    notifyListeners();
  }

}

```

위 클래스는 ```Listenable``` 인 ```ChangeNotifier``` 를 상속하고 있다. 이 클래스가 신호를 주면 ```MyProvider``` 가 다시 그려질 것이다.


```dart title="view.dart"
import 'package:flutter/material.dart';
import 'package:test1/viewmodels/touch_counter_vm.dart';
import 'package:test1/widgets/MyProvider.dart';

class TouchCounterV extends StatelessWidget{
  const TouchCounterV({super.key});

  @override
  Widget build(BuildContext context) {
    var vm = MyProvider.of<TouchCounterVM>(context);

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            Text("Count : ${vm.count}"),
            TextButton(
              onPressed: (){ vm.onClick();}, 
              child: const Text("Touch"))
          ],
        ),    
      )
    );
   
  }

}

```

위 코드에서는 ```TouchCounterVM``` 에 대한 DI 가 이루어진 것을 확인할 수 있다. 사실 주입이라기엔 약간 부족하지만 이정도면 충분한 듯 하다.


## 정리

지금까지 flutter framework 의 기능을 사용해 간단한 DI 예제를 만들어보았다.

핵심은 필요한 모듈을 Widget Tree 에 위치시키고 자식 Widget 에서 필요한 모듈을 주입받을 수 있다는 것이다.

이제 ```Theme``` 같은 모듈에서 구현된 ```of(BuildContext)``` 함수나 ```Provider``` 같이 많이 사용되는 패키지의 작동원리를 쉽게 이해할 수 있을 것이다.


## 참고자료

https://api.flutter.dev/flutter/widgets/BuildContext/dependOnInheritedWidgetOfExactType.html

https://medium.com/@tigerasks/provider-based-dependency-injection-in-flutter-e04cb5bdd5685:T43d0,<h2 id="flutter-and-react">flutter and react</h2>
<p>flutter 는 js react 와 비슷한 면이 꽤 있다.</p>
<p>js react 는 virtual dom 과 코드 상의 HTML element 를 분리하여 성능과 개별편의를 둘다 잡았다.
flutter 도 마찬가지로 element 와 widget 이라는 흡사한 개념을 사용하고 있다.</p>
<p>DI 를 위한 기능도 비슷하게 지원하고 있다.
react 에서는 context provider 를 사용해 부모 노드 쪽에 필요한 서비스를 넣어두고 자식 노드에서 해당 서비스들을 가져올 수 있다.
flutter 에서는 <a href="https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html">InheritedWidget</a> 을 통해 부모 노드에 등록한 서비스를 자식 노드에서 빠르게 가져올 수 있다.</p>
<p>react 를 써봤다면 이제 flutter 에서의 di 가 어떨지 대충 감이 잡혔을거라 생각한다.</p>
<h2 id="My-Provider-Example">My Provider Example</h2>
<p>flutter 친화적인 di 를 간단하게 만들어보자.</p>
<p>샘플은 한 버튼과 그 버튼을 클릭한 횟수가 전시되는 텍스트로 이루어진 한 화면을 갖고 있다.</p>
<p>기능이 단순하므로 view model 에서 클릭한 횟수를 관리하고 view 는 버튼클릭 시의 적절한 함수를 호출하고 클릭 횟수를 조회만 하도록 하자.</p>
<p>이를 위해 Provider 를 간단하게 구현했다.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="dart" data-theme="github-dark" data-code="import &#x27;package:flutter/material.dart&#x27;;

class MyProvider<T extends Listenable> extends InheritedNotifier<T>{
  MyProvider(
    {super.key, 
    required T Function() create,
    required super.child}) 
    : super(notifier: create());

  static T of<T extends Listenable>(BuildContext context)
    => context.dependOnInheritedWidgetOfExactType<MyProvider<T>>()!.notifier!;
}

">my_provider.dart<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="dart" data-theme="github-dark"><code data-language="dart" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#9ECBFF"> 'package:flutter/material.dart'</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">class</span><span style="color:#79B8FF"> MyProvider</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">T</span><span style="color:#F97583"> extends</span><span style="color:#79B8FF"> Listenable</span><span style="color:#E1E4E8">> </span><span style="color:#F97583">extends</span><span style="color:#79B8FF"> InheritedNotifier</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">T</span><span style="color:#E1E4E8">>{</span></span>
<span data-line=""><span style="color:#79B8FF">  MyProvider</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span><span style="color:#79B8FF">super</span><span style="color:#E1E4E8">.key, </span></span>
<span data-line=""><span style="color:#F97583">    required</span><span style="color:#79B8FF"> T</span><span style="color:#79B8FF"> Function</span><span style="color:#E1E4E8">() create,</span></span>
<span data-line=""><span style="color:#F97583">    required</span><span style="color:#79B8FF"> super</span><span style="color:#E1E4E8">.child}) </span></span>
<span data-line=""><span style="color:#F97583">    :</span><span style="color:#79B8FF"> super</span><span style="color:#E1E4E8">(notifier</span><span style="color:#F97583">:</span><span style="color:#B392F0"> create</span><span style="color:#E1E4E8">());</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  static</span><span style="color:#79B8FF"> T</span><span style="color:#B392F0"> of</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">T</span><span style="color:#F97583"> extends</span><span style="color:#79B8FF"> Listenable</span><span style="color:#E1E4E8">>(</span><span style="color:#79B8FF">BuildContext</span><span style="color:#E1E4E8"> context)</span></span>
<span data-line=""><span style="color:#F97583">    =></span><span style="color:#E1E4E8"> context.</span><span style="color:#B392F0">dependOnInheritedWidgetOfExactType</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">MyProvider</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">T</span><span style="color:#E1E4E8">>>()</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">.notifier</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span></code></pre></figure>
<p>상속을 하고 있는 <code>InheritedNotifier</code> 가 중요하다. 이 클래스는 <code>Widget</code> 이면서 특별한 기능을 가지고 있다. 바로 생성자에서 <code>Listenable</code> 인 <code>notifier</code> 를 받아서 신호를 받으면 자기 자신을 다시 그리게 하는 기능이다.</p>
<p><code>dependOnInheritedWidgetOfExactType()</code> 를 호출하는 것도 중요하다. 이 함수를 통해 flutter 에서는 <code>BuildContext</code> 만 있으면 상수 시간 내에 <code>InheritedWidget</code> 을 찾을 수 있다. 위 코드는 편의를 위해 전역함수로 한번 감싼걸 확인할 수 있다. 많이 쓰이는 패턴이다.</p>
<p>그럼 실제 어떻게 사용하는지 살펴보자.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="dart" data-theme="github-dark" data-code="class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: &#x27;Flutter Demo&#x27;,
      home: MyProvider<TouchCounterVM>(
        create: () => TouchCounterVM(), 
        child: const TouchCounterV())
    );
  }
}

">main.dart<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="dart" data-theme="github-dark"><code data-language="dart" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">class</span><span style="color:#79B8FF"> MyApp</span><span style="color:#F97583"> extends</span><span style="color:#79B8FF"> StatelessWidget</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">  const</span><span style="color:#79B8FF"> MyApp</span><span style="color:#E1E4E8">({</span><span style="color:#79B8FF">super</span><span style="color:#E1E4E8">.key});</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6A737D">  // This widget is the root of your application.</span></span>
<span data-line=""><span style="color:#F97583">  @override</span></span>
<span data-line=""><span style="color:#79B8FF">  Widget</span><span style="color:#B392F0"> build</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">BuildContext</span><span style="color:#E1E4E8"> context) {</span></span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#79B8FF"> MaterialApp</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">      title</span><span style="color:#F97583">:</span><span style="color:#9ECBFF"> 'Flutter Demo'</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">      home</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> MyProvider</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">TouchCounterVM</span><span style="color:#E1E4E8">>(</span></span>
<span data-line=""><span style="color:#E1E4E8">        create</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#79B8FF"> TouchCounterVM</span><span style="color:#E1E4E8">(), </span></span>
<span data-line=""><span style="color:#E1E4E8">        child</span><span style="color:#F97583">:</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> TouchCounterV</span><span style="color:#E1E4E8">())</span></span>
<span data-line=""><span style="color:#E1E4E8">    );</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span></code></pre></figure>
<p>위 코드는 위젯 트리의 가장 윗부분을 보여주고 있다.
스스로 역시 위젯인 Provider 를 사용해 <code>TouchCounterVM</code> 을 하위 위젯인 <code>TouchCounterV</code> 에서 참조할 수 있도록 한다.</p>
<p>다음은 view 와 view model 을 살펴보자.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="dart" data-theme="github-dark" data-code="import &#x27;package:flutter/material.dart&#x27;;

class TouchCounterVM  with ChangeNotifier{
  int count = 0;

  void onClick(){
    count++;
    notifyListeners();
  }

}

">view_model.dart<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="dart" data-theme="github-dark"><code data-language="dart" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#9ECBFF"> 'package:flutter/material.dart'</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">class</span><span style="color:#79B8FF"> TouchCounterVM</span><span style="color:#F97583">  with</span><span style="color:#79B8FF"> ChangeNotifier</span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#79B8FF">  int</span><span style="color:#E1E4E8"> count </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  void</span><span style="color:#B392F0"> onClick</span><span style="color:#E1E4E8">(){</span></span>
<span data-line=""><span style="color:#E1E4E8">    count</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#B392F0">    notifyListeners</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span></code></pre></figure>
<p>위 클래스는 <code>Listenable</code> 인 <code>ChangeNotifier</code> 를 상속하고 있다. 이 클래스가 신호를 주면 <code>MyProvider</code> 가 다시 그려질 것이다.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="dart" data-theme="github-dark" data-code="import &#x27;package:flutter/material.dart&#x27;;
import &#x27;package:test1/viewmodels/touch_counter_vm.dart&#x27;;
import &#x27;package:test1/widgets/MyProvider.dart&#x27;;

class TouchCounterV extends StatelessWidget{
  const TouchCounterV({super.key});

  @override
  Widget build(BuildContext context) {
    var vm = MyProvider.of<TouchCounterVM>(context);

    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            Text(&#x22;Count : ${vm.count}&#x22;),
            TextButton(
              onPressed: (){ vm.onClick();}, 
              child: const Text(&#x22;Touch&#x22;))
          ],
        ),    
      )
    );
   
  }

}

">view.dart<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="dart" data-theme="github-dark"><code data-language="dart" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#9ECBFF"> 'package:flutter/material.dart'</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#9ECBFF"> 'package:test1/viewmodels/touch_counter_vm.dart'</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">import</span><span style="color:#9ECBFF"> 'package:test1/widgets/MyProvider.dart'</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">class</span><span style="color:#79B8FF"> TouchCounterV</span><span style="color:#F97583"> extends</span><span style="color:#79B8FF"> StatelessWidget</span><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">  const</span><span style="color:#79B8FF"> TouchCounterV</span><span style="color:#E1E4E8">({</span><span style="color:#79B8FF">super</span><span style="color:#E1E4E8">.key});</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">  @override</span></span>
<span data-line=""><span style="color:#79B8FF">  Widget</span><span style="color:#B392F0"> build</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">BuildContext</span><span style="color:#E1E4E8"> context) {</span></span>
<span data-line=""><span style="color:#F97583">    var</span><span style="color:#E1E4E8"> vm </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> MyProvider</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">of</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#79B8FF">TouchCounterVM</span><span style="color:#E1E4E8">>(context);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#79B8FF"> Scaffold</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">      body</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> SafeArea</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">        child</span><span style="color:#F97583">:</span><span style="color:#79B8FF"> Column</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">          children</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> [</span></span>
<span data-line=""><span style="color:#79B8FF">            Text</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Count : ${</span><span style="color:#79B8FF">vm</span><span style="color:#9ECBFF">.</span><span style="color:#79B8FF">count</span><span style="color:#9ECBFF">}"</span><span style="color:#E1E4E8">),</span></span>
<span data-line=""><span style="color:#79B8FF">            TextButton</span><span style="color:#E1E4E8">(</span></span>
<span data-line=""><span style="color:#E1E4E8">              onPressed</span><span style="color:#F97583">:</span><span style="color:#E1E4E8"> (){ vm.</span><span style="color:#B392F0">onClick</span><span style="color:#E1E4E8">();}, </span></span>
<span data-line=""><span style="color:#E1E4E8">              child</span><span style="color:#F97583">:</span><span style="color:#F97583"> const</span><span style="color:#79B8FF"> Text</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Touch"</span><span style="color:#E1E4E8">))</span></span>
<span data-line=""><span style="color:#E1E4E8">          ],</span></span>
<span data-line=""><span style="color:#E1E4E8">        ),    </span></span>
<span data-line=""><span style="color:#E1E4E8">      )</span></span>
<span data-line=""><span style="color:#E1E4E8">    );</span></span>
<span data-line=""><span style="color:#E1E4E8">   </span></span>
<span data-line=""><span style="color:#E1E4E8">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span></code></pre></figure>
<p>위 코드에서는 <code>TouchCounterVM</code> 에 대한 DI 가 이루어진 것을 확인할 수 있다. 사실 주입이라기엔 약간 부족하지만 이정도면 충분한 듯 하다.</p>
<h2 id="정리">정리</h2>
<p>지금까지 flutter framework 의 기능을 사용해 간단한 DI 예제를 만들어보았다.</p>
<p>핵심은 필요한 모듈을 Widget Tree 에 위치시키고 자식 Widget 에서 필요한 모듈을 주입받을 수 있다는 것이다.</p>
<p>이제 <code>Theme</code> 같은 모듈에서 구현된 <code>of(BuildContext)</code> 함수나 <code>Provider</code> 같이 많이 사용되는 패키지의 작동원리를 쉽게 이해할 수 있을 것이다.</p>
<h2 id="참고자료">참고자료</h2>
<p><a href="https://api.flutter.dev/flutter/widgets/BuildContext/dependOnInheritedWidgetOfExactType.html">https://api.flutter.dev/flutter/widgets/BuildContext/dependOnInheritedWidgetOfExactType.html</a></p>
<p><a href="https://medium.com/@tigerasks/provider-based-dependency-injection-in-flutter-e04cb5bdd568">https://medium.com/@tigerasks/provider-based-dependency-injection-in-flutter-e04cb5bdd568</a></p>b:["categories","programming/pattern/flutter-di","c"]
0:["pR1nTR9yj-z1qeoUMWbaL",[[["",{"children":["blog",{"children":[["categories","programming/pattern/flutter-di","c"],{"children":["__PAGE__?{\"categories\":[\"programming\",\"pattern\",\"flutter-di\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","programming/pattern/flutter-di","c"],{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"How DI works in Flutter."}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/programming/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"programming"}]]}],["$","div","/blog/programming/pattern/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"pattern"}]]}],["$","div","/blog/programming/pattern/flutter-di/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/flutter-di/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"flutter-di"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"6/8/2024"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","section",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["design pattern","flutter"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-color-border tw-border-2 ","children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 tw-text-color-border","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"$undefined"}]]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"Patterns for Concurrency Programming"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/observable","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Observable 에 관한 메모"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Observable 의 여러 기능. Hot/Cold Stream , 스레드 동기화 등"}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/dto","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"DTO"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Data Transport Object 의 역할"}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/mvvm-disign-pattern","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"MVVM 에서 사용하는 Design Pattern"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":""}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/concurrency","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Patterns for Concurrency Programming"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Concurrency Programming 에서 쓰이는 패턴과 쉽게 범할 요류들 정리"}]]}]]}]}]}]}]]}]]}]]}],null]]},[null,["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/601f73c9b9392328.css","precedence":"next","crossOrigin":""}]]}],null]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){try{(null==localStorage.getItem(\"theme\")&&window.matchMedia(\"(prefers-color-scheme: dark)\").matches||\"dark\"==localStorage.getItem(\"theme\"))&&document.documentElement.setAttribute(\"data-theme\",\"dark\")}catch(e){}})()"}}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$Ld",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$Le",null,{}],["$","$L2",null,{"className":"tw-self-center tw-ml-1 tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl hover:tw-text-color-text","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"LOG | STUDY"}],["$","div",null,{"className":"tw-grow"}],["$","$Lf",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$L10",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L11",null,{}],["$","aside",null,{"children":["$","$L12",null,{"children":["$","div",null,{"className":"sidebar_sidebar__gN2ma","children":[["$","$L13",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/portfolio","label":"PORTFOLIO★","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/tags","label":"TAGS","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$L13","/blog",{"slug":"/blog","label":"BLOG","refCount":16,"depth":0,"children":[["$","$L13","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":2,"depth":1,"children":"$undefined"}],["$","$L13","/blog/computer-science",{"slug":"/blog/computer-science","label":"COMPUTER-SCIENCE","refCount":3,"depth":1,"children":[["$","$L13","/blog/computer-science/graphics",{"slug":"/blog/computer-science/graphics","label":"GRAPHICS","refCount":3,"depth":2,"children":"$undefined"}]]}],["$","$L13","/blog/programming",{"slug":"/blog/programming","label":"PROGRAMMING","refCount":11,"depth":1,"children":[["$","$L13","/blog/programming/pattern",{"slug":"/blog/programming/pattern","label":"PATTERN","refCount":5,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/web",{"slug":"/blog/programming/web","label":"WEB","refCount":3,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/wpf",{"slug":"/blog/programming/wpf","label":"WPF","refCount":2,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/tips",{"slug":"/blog/programming/tips","label":"TIPS","refCount":1,"depth":2,"children":"$undefined"}]]}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$L14",null,{"children":["$","$L15",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pb-52","children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95 tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4 mobile:tw-flex-col dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","$L2",null,{"className":"tw-flex tw-self-center","href":"https://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2024 Mona04. Powered by ",["$","$L2",null,{"className":"$undefined","href":"https://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","prefetch":false,"children":"NextJS"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto mobile:tw-hidden","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"13:36"}],["$","div",null,{"className":"tw-ml-1","children":"2024/7/25"}]]}]]}]}]}]]}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){if(document)for(let e of document.querySelectorAll(\"[data-rehype-pretty-code-title]\"))for(let a of e.getElementsByTagName(\"button\"))a.addEventListener(\"click\",function(){if(navigator.clipboard){var n=e.getAttribute(\"data-code\");null!=n&&(navigator.clipboard.writeText(n),a.setAttribute(\"checked\",\"true\"),a.disabled=!0),setTimeout(()=>{a.removeAttribute(\"checked\"),a.disabled=!1},2e3)}})})()"},"defer":true}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/cd17a881c562f544.css","precedence":"next","crossOrigin":""}]],"$L16"]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"How DI works in Flutter."}],["$","meta","3",{"name":"description","content":"Flutter 의 Provider Pattern 이 어떻게 구현되는지 살펴보기."}],["$","link","4",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","5",{"name":"author","content":"Mona04"}],["$","meta","6",{"name":"category","content":"/blog/programming/pattern/flutter-di"}],["$","link","7",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/programming/pattern/flutter-di"}],["$","link","8",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
