2:I[5250,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],""]
3:I[8646,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],""]
6:I[1558,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],""]
7:I[4507,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],""]
8:I[4626,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],"WithTooltip"]
9:I[3991,["700","static/chunks/700-7364e92249ca8225.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-7d89f2865be184d7.js","631","static/chunks/app/blog/%5B...categories%5D/page-272be070af5327d8.js"],""]
a:I[5613,[],""]
c:I[1778,[],""]
4:T17e6,

## Hot / Cold Stream


``` c# title="hot stream"

using System.Collections.Concurrent;
using System.Reactive.Concurrency;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Reactive.Subjects;

namespace Test;

public class HotStream<T> : IDisposable
{
    public ConcurrentQueue<T> Queue { get; } = new ConcurrentQueue<T>();
    public IObservable<T> Stream => mStream;

    private readonly AutoResetEvent mDequeueEvent = new AutoResetEvent(false);
    private readonly CancellationTokenSource mCancelToken = new CancellationTokenSource();
    private readonly IConnectableObservable<T> mStream;

    public HotStream(IScheduler? scheduler = null)
    {
        var baseStream = Observable.Create<T>(o =>
        {
            while (mCancelToken.IsCancellationRequested == false)
            {
                mDequeueEvent.WaitOne();
                while (Queue.TryDequeue(out T? result) && !mCancelToken.IsCancellationRequested)
                {
                    o.OnNext(result);
                }
            }
            o.OnCompleted();
            return Disposable.Empty;
        });

        if (scheduler == null) scheduler = new EventLoopScheduler();
        mStream = baseStream.SubscribeOn(scheduler).Publish();
        mStream.Connect();
    }
    public void OnNext()
    {
        mDequeueEvent.Set();
    }

    bool bDisposed = false;
    public void Dispose()
    {
        if (bDisposed == false)
        {
            bDisposed = true;
            mCancelToken.Cancel();
            mDequeueEvent.Set();
            Queue.Clear();
        }
    }
}
```

위는 ```Publish()```, ```Connect()``` 를 이용해 구현한 간단한 Hot Stream 이다. ```Publish()``` 는 내부적으로 ```Subject<T>``` 를 사용했고 사실 ```Subject<T>``` 가 Hot Stream 이기도 하다. 그래서 ```Subject<T>``` 만 써도 된다. 하지만 ```Publish()``` 특징을 보이기 위해서 위 코드를 들고왔다.

Hot Stream 은 구독 전에 호출한 ```OnNext()``` 를 무시하며 바로바로 보내는 것이 특징이다.

그래서 다음과 같은 결과를 보인다.

```c# title="input"
var stream = new HotStream<string>();
stream.Queue.Enqueue("1");
stream.OnNext();
Thread.Sleep(1000); // thread 변환까지의 딜레이를 고려
stream.Stream.Subscribe(s=>Console.WriteLine($"1 => {s}"));
stream.Stream.Subscribe(s=>Console.WriteLine($"2 => {s}"));
for (int i = 2; i < 5; i++)
    stream.Queue.Enqueue(i.ToString());
stream.OnNext();
```

```plaintext title="output"
1 => 2
2 => 2
1 => 3
2 => 3
1 => 4
2 => 4
```

만약 ```Publish()``` 를 사용하지 않았다면 어떨까?

```plaintext title="output"
1 => 1
1 => 2
1 => 3
1 => 4
```

위는 Cold Stream 의 두가지 특징을 가지고 있다. 
1. ```Subscribe()``` 하기 전의 값이 살아있다. 이는 ```Subscribe()``` 시점에 Observable Sequence 가 값을 넣기 시작하기 때문이다.
2. 1번 구독자만 살아있다가 끝난다. 왜냐하면 위 구현에서는 ```Observable``` 내부의 루프가 끝나지 않아서 다음 ```Observer``` 에게 순서가 가지 않기 때문이다. 만약 가더라도 queue 내부는 비워서 아무일도 안할 것이다.


이러한 특징 때문에 요구사항에 맞는 stream 을 쓰는게 중요하다. ui 등 가장 최신 값이 필요하면 Hot Stream 을 사용한다던지 말이다.



### Hot Stream 다른 구현 버전

``` c# title="hot stream"
public class HotStream : IDisposable
{
    public IObservable<T?> Stream<T>() where T : class => mSource.Where(v => v is T)!.Cast<T?>();

    private readonly IDisposable mSourceToken;
    private readonly IConnectableObservable<object?> mSource;
    private readonly CancellationTokenSource mCancelToken;
    private readonly BlockingCollection<object?> mQueue = new();
    
    public MixStream(IScheduler? scheduler = null)
    {
        scheduler ??= new EventLoopScheduler();
        this.mCancelToken = new CancellationTokenSource();

        var baseStream = Observable.Create<object>(observer =>
        {
            while (this.mCancelToken.IsCancellationRequested == false)
            {
                while (this.mQueue.TryTake(out object? result) && !this.mCancelToken.IsCancellationRequested)
                {
                    observer.OnNext(result);
                }
            }
            observer.OnCompleted();
            return Disposable.Create(() =>
            {
                Console.WriteLine("Stream End");
            });
        });

        mSource = baseStream.SubscribeOn(scheduler).Publish();
        mSourceToken = this.mSource.Connect();
    }
    public void OnNext(object? message)
    {
        this.mQueue.TryAdd(message);
    }
    public void Dispose()
    {
        mSourceToken.Dispose();
        mCancelToken.Dispose();
    }    
}
```

```BlockingCollection<>``` 을 사용한 버전이다. 



## SubscribeOn vs ObserveOn

``` c#
    IObservable<int> observable = Observable.Create<int>(r =>
        {
            // SubscribeOn() 에서 스케듈러가 적용되는 부분
            r.OnNext(1);
            return Disposable.Empty;
        })
        .ObserveOn(new EventLoopScheduler())
        .SubscribeOn(new EventLoopScheduler());
    observable.Subscribe(_ =>
    {
        // ObserveOn() 에서 스케듈러가 적용되는 부분
    });
```

```ObserveOn()``` 은 Subscriber 가 등록한 Callback 이 호출될 Scheduler 를 정한다. 기본은 ```OnNext()``` 가 호출되는 CallStack 에서 Callback 이 호출됨을 염두에 두자.

```SubscribeOn()``` 은 Cold Stream 에 ```Subscribe()``` 를 할 때 Sequence 가 만들어지는 스케듈러를 바꾼다. 그래서 만약 ```Publish()```/```Connect()``` 를 쓰면 적용되지 않는다.





## 참고자료

[msdn IConnectableObservable\<T\> Interface](https://learn.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh211887(v=vs.103))5:T7384,<h2 id="Hot-/-Cold-Stream">Hot / Cold Stream</h2>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="github-dark">c#<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c#" data-theme="github-dark"><code data-language="c#" data-theme="github-dark" style="display: grid;"><span data-line=""> </span>
<span data-line=""><span style="color:#F97583">using</span><span style="color:#B392F0"> System</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Collections</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Concurrent</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">using</span><span style="color:#B392F0"> System</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Reactive</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Concurrency</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">using</span><span style="color:#B392F0"> System</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Reactive</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Disposables</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">using</span><span style="color:#B392F0"> System</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Reactive</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Linq</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">using</span><span style="color:#B392F0"> System</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Reactive</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Subjects</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">namespace</span><span style="color:#B392F0"> Test</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> HotStream</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">> : </span><span style="color:#B392F0">IDisposable</span></span>
<span data-line=""><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> ConcurrentQueue</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">> </span><span style="color:#B392F0">Queue</span><span style="color:#E1E4E8"> { </span><span style="color:#F97583">get</span><span style="color:#E1E4E8">; } </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> ConcurrentQueue</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">>();</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> IObservable</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">> </span><span style="color:#B392F0">Stream</span><span style="color:#F97583"> =></span><span style="color:#E1E4E8"> mStream;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> AutoResetEvent</span><span style="color:#B392F0"> mDequeueEvent</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> AutoResetEvent</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> CancellationTokenSource</span><span style="color:#B392F0"> mCancelToken</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> CancellationTokenSource</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> IConnectableObservable</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">> </span><span style="color:#B392F0">mStream</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> HotStream</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">IScheduler</span><span style="color:#E1E4E8">? </span><span style="color:#B392F0">scheduler</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#F97583">        var</span><span style="color:#B392F0"> baseStream</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Observable.</span><span style="color:#B392F0">Create</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">>(</span><span style="color:#B392F0">o</span><span style="color:#F97583"> =></span></span>
<span data-line=""><span style="color:#E1E4E8">        {</span></span>
<span data-line=""><span style="color:#F97583">            while</span><span style="color:#E1E4E8"> (mCancelToken.IsCancellationRequested </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">            {</span></span>
<span data-line=""><span style="color:#E1E4E8">                mDequeueEvent.</span><span style="color:#B392F0">WaitOne</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">                while</span><span style="color:#E1E4E8"> (Queue.</span><span style="color:#B392F0">TryDequeue</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">out</span><span style="color:#B392F0"> T</span><span style="color:#E1E4E8">? </span><span style="color:#B392F0">result</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">mCancelToken.IsCancellationRequested)</span></span>
<span data-line=""><span style="color:#E1E4E8">                {</span></span>
<span data-line=""><span style="color:#E1E4E8">                    o.</span><span style="color:#B392F0">OnNext</span><span style="color:#E1E4E8">(result);</span></span>
<span data-line=""><span style="color:#E1E4E8">                }</span></span>
<span data-line=""><span style="color:#E1E4E8">            }</span></span>
<span data-line=""><span style="color:#E1E4E8">            o.</span><span style="color:#B392F0">OnCompleted</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">            return</span><span style="color:#E1E4E8"> Disposable.Empty;</span></span>
<span data-line=""><span style="color:#E1E4E8">        });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8"> (scheduler </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">) scheduler </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> EventLoopScheduler</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        mStream </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> baseStream.</span><span style="color:#B392F0">SubscribeOn</span><span style="color:#E1E4E8">(scheduler).</span><span style="color:#B392F0">Publish</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        mStream.</span><span style="color:#B392F0">Connect</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> OnNext</span><span style="color:#E1E4E8">()</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#E1E4E8">        mDequeueEvent.</span><span style="color:#B392F0">Set</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    bool</span><span style="color:#B392F0"> bDisposed</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> Dispose</span><span style="color:#E1E4E8">()</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8"> (bDisposed </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">        {</span></span>
<span data-line=""><span style="color:#E1E4E8">            bDisposed </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">            mCancelToken.</span><span style="color:#B392F0">Cancel</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">            mDequeueEvent.</span><span style="color:#B392F0">Set</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">            Queue.</span><span style="color:#B392F0">Clear</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<p>위는 <code>Publish()</code>, <code>Connect()</code> 를 이용해 구현한 간단한 Hot Stream 이다. <code>Publish()</code> 는 내부적으로 <code>Subject&#x3C;T></code> 를 사용했고 사실 <code>Subject&#x3C;T></code> 가 Hot Stream 이기도 하다. 그래서 <code>Subject&#x3C;T></code> 만 써도 된다. 하지만 <code>Publish()</code> 특징을 보이기 위해서 위 코드를 들고왔다.</p>
<p>Hot Stream 은 구독 전에 호출한 <code>OnNext()</code> 를 무시하며 바로바로 보내는 것이 특징이다.</p>
<p>그래서 다음과 같은 결과를 보인다.</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="github-dark">c#<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c#" data-theme="github-dark"><code data-language="c#" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">var</span><span style="color:#B392F0"> stream</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> HotStream</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">string</span><span style="color:#E1E4E8">>();</span></span>
<span data-line=""><span style="color:#E1E4E8">stream.Queue.</span><span style="color:#B392F0">Enqueue</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"1"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">stream.</span><span style="color:#B392F0">OnNext</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">Thread.</span><span style="color:#B392F0">Sleep</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">); </span><span style="color:#6A737D">// thread 변환까지의 딜레이를 고려</span></span>
<span data-line=""><span style="color:#E1E4E8">stream.Stream.</span><span style="color:#B392F0">Subscribe</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">s</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">Console.</span><span style="color:#B392F0">WriteLine</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">$"1 => {</span><span style="color:#E1E4E8">s</span><span style="color:#9ECBFF">}"</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#E1E4E8">stream.Stream.</span><span style="color:#B392F0">Subscribe</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">s</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">Console.</span><span style="color:#B392F0">WriteLine</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">$"2 => {</span><span style="color:#E1E4E8">s</span><span style="color:#9ECBFF">}"</span><span style="color:#E1E4E8">));</span></span>
<span data-line=""><span style="color:#F97583">for</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">int</span><span style="color:#B392F0"> i</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 2</span><span style="color:#E1E4E8">; i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; i</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    stream.Queue.</span><span style="color:#B392F0">Enqueue</span><span style="color:#E1E4E8">(i.</span><span style="color:#B392F0">ToString</span><span style="color:#E1E4E8">());</span></span>
<span data-line=""><span style="color:#E1E4E8">stream.</span><span style="color:#B392F0">OnNext</span><span style="color:#E1E4E8">();</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="plaintext" data-theme="github-dark">plaintext<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="plaintext" data-theme="github-dark"><code data-language="plaintext" data-theme="github-dark" style="display: grid;"><span data-line=""><span>1 => 2</span></span>
<span data-line=""><span>2 => 2</span></span>
<span data-line=""><span>1 => 3</span></span>
<span data-line=""><span>2 => 3</span></span>
<span data-line=""><span>1 => 4</span></span>
<span data-line=""><span>2 => 4</span></span></code></pre></figure>
<p>만약 <code>Publish()</code> 를 사용하지 않았다면 어떨까?</p>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="plaintext" data-theme="github-dark">plaintext<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="plaintext" data-theme="github-dark"><code data-language="plaintext" data-theme="github-dark" style="display: grid;"><span data-line=""><span>1 => 1</span></span>
<span data-line=""><span>1 => 2</span></span>
<span data-line=""><span>1 => 3</span></span>
<span data-line=""><span>1 => 4</span></span></code></pre></figure>
<p>위는 Cold Stream 의 두가지 특징을 가지고 있다.</p>
<ol>
<li><code>Subscribe()</code> 하기 전의 값이 살아있다. 이는 <code>Subscribe()</code> 시점에 Observable Sequence 가 값을 넣기 시작하기 때문이다.</li>
<li>1번 구독자만 살아있다가 끝난다. 왜냐하면 위 구현에서는 <code>Observable</code> 내부의 루프가 끝나지 않아서 다음 <code>Observer</code> 에게 순서가 가지 않기 때문이다. 만약 가더라도 queue 내부는 비워서 아무일도 안할 것이다.</li>
</ol>
<p>이러한 특징 때문에 요구사항에 맞는 stream 을 쓰는게 중요하다. ui 등 가장 최신 값이 필요하면 Hot Stream 을 사용한다던지 말이다.</p>
<h3 id="Hot-Stream-다른-구현-버전">Hot Stream 다른 구현 버전</h3>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="github-dark">c#<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c#" data-theme="github-dark"><code data-language="c#" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">public</span><span style="color:#F97583"> class</span><span style="color:#B392F0"> HotStream</span><span style="color:#E1E4E8"> : </span><span style="color:#B392F0">IDisposable</span></span>
<span data-line=""><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> IObservable</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">?> </span><span style="color:#B392F0">Stream</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">>() </span><span style="color:#F97583">where</span><span style="color:#B392F0"> T</span><span style="color:#E1E4E8"> : </span><span style="color:#F97583">class</span><span style="color:#F97583"> =></span><span style="color:#E1E4E8"> mSource.</span><span style="color:#B392F0">Where</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">v</span><span style="color:#F97583"> =></span><span style="color:#E1E4E8"> v </span><span style="color:#F97583">is</span><span style="color:#B392F0"> T</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">!</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">Cast</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#B392F0">T</span><span style="color:#E1E4E8">?>();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> IDisposable</span><span style="color:#B392F0"> mSourceToken</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> IConnectableObservable</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">object</span><span style="color:#E1E4E8">?> </span><span style="color:#B392F0">mSource</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> CancellationTokenSource</span><span style="color:#B392F0"> mCancelToken</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">    private</span><span style="color:#F97583"> readonly</span><span style="color:#B392F0"> BlockingCollection</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">object</span><span style="color:#E1E4E8">?> </span><span style="color:#B392F0">mQueue</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    </span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#B392F0"> MixStream</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">IScheduler</span><span style="color:#E1E4E8">? </span><span style="color:#B392F0">scheduler</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> null</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#E1E4E8">        scheduler </span><span style="color:#F97583">??=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> EventLoopScheduler</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#79B8FF">        this</span><span style="color:#E1E4E8">.mCancelToken </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> CancellationTokenSource</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">        var</span><span style="color:#B392F0"> baseStream</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Observable.</span><span style="color:#B392F0">Create</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">object</span><span style="color:#E1E4E8">>(</span><span style="color:#B392F0">observer</span><span style="color:#F97583"> =></span></span>
<span data-line=""><span style="color:#E1E4E8">        {</span></span>
<span data-line=""><span style="color:#F97583">            while</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.mCancelToken.IsCancellationRequested </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">            {</span></span>
<span data-line=""><span style="color:#F97583">                while</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.mQueue.</span><span style="color:#B392F0">TryTake</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">out</span><span style="color:#F97583"> object</span><span style="color:#E1E4E8">? </span><span style="color:#B392F0">result</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#F97583"> !</span><span style="color:#79B8FF">this</span><span style="color:#E1E4E8">.mCancelToken.IsCancellationRequested)</span></span>
<span data-line=""><span style="color:#E1E4E8">                {</span></span>
<span data-line=""><span style="color:#E1E4E8">                    observer.</span><span style="color:#B392F0">OnNext</span><span style="color:#E1E4E8">(result);</span></span>
<span data-line=""><span style="color:#E1E4E8">                }</span></span>
<span data-line=""><span style="color:#E1E4E8">            }</span></span>
<span data-line=""><span style="color:#E1E4E8">            observer.</span><span style="color:#B392F0">OnCompleted</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">            return</span><span style="color:#E1E4E8"> Disposable.</span><span style="color:#B392F0">Create</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span></span>
<span data-line=""><span style="color:#E1E4E8">            {</span></span>
<span data-line=""><span style="color:#E1E4E8">                Console.</span><span style="color:#B392F0">WriteLine</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"Stream End"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">            });</span></span>
<span data-line=""><span style="color:#E1E4E8">        });</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        mSource </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> baseStream.</span><span style="color:#B392F0">SubscribeOn</span><span style="color:#E1E4E8">(scheduler).</span><span style="color:#B392F0">Publish</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        mSourceToken </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> this</span><span style="color:#E1E4E8">.mSource.</span><span style="color:#B392F0">Connect</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> OnNext</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">object</span><span style="color:#E1E4E8">? </span><span style="color:#B392F0">message</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#79B8FF">        this</span><span style="color:#E1E4E8">.mQueue.</span><span style="color:#B392F0">TryAdd</span><span style="color:#E1E4E8">(message);</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""><span style="color:#F97583">    public</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> Dispose</span><span style="color:#E1E4E8">()</span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#E1E4E8">        mSourceToken.</span><span style="color:#B392F0">Dispose</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">        mCancelToken.</span><span style="color:#B392F0">Dispose</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    }    </span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<p><code>BlockingCollection&#x3C;></code> 을 사용한 버전이다.</p>
<h2 id="SubscribeOn-vs-ObserveOn">SubscribeOn vs ObserveOn</h2>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="github-dark">c#<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c#" data-theme="github-dark"><code data-language="c#" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#B392F0">    IObservable</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">> </span><span style="color:#B392F0">observable</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Observable.</span><span style="color:#B392F0">Create</span><span style="color:#E1E4E8">&#x3C;</span><span style="color:#F97583">int</span><span style="color:#E1E4E8">>(</span><span style="color:#B392F0">r</span><span style="color:#F97583"> =></span></span>
<span data-line=""><span style="color:#E1E4E8">        {</span></span>
<span data-line=""><span style="color:#6A737D">            // SubscribeOn() 에서 스케듈러가 적용되는 부분</span></span>
<span data-line=""><span style="color:#E1E4E8">            r.</span><span style="color:#B392F0">OnNext</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#F97583">            return</span><span style="color:#E1E4E8"> Disposable.Empty;</span></span>
<span data-line=""><span style="color:#E1E4E8">        })</span></span>
<span data-line=""><span style="color:#E1E4E8">        .</span><span style="color:#B392F0">ObserveOn</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> EventLoopScheduler</span><span style="color:#E1E4E8">())</span></span>
<span data-line=""><span style="color:#E1E4E8">        .</span><span style="color:#B392F0">SubscribeOn</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> EventLoopScheduler</span><span style="color:#E1E4E8">());</span></span>
<span data-line=""><span style="color:#E1E4E8">    observable.</span><span style="color:#B392F0">Subscribe</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">_</span><span style="color:#F97583"> =></span></span>
<span data-line=""><span style="color:#E1E4E8">    {</span></span>
<span data-line=""><span style="color:#6A737D">        // ObserveOn() 에서 스케듈러가 적용되는 부분</span></span>
<span data-line=""><span style="color:#E1E4E8">    });</span></span></code></pre></figure>
<p><code>ObserveOn()</code> 은 Subscriber 가 등록한 Callback 이 호출될 Scheduler 를 정한다. 기본은 <code>OnNext()</code> 가 호출되는 CallStack 에서 Callback 이 호출됨을 염두에 두자.</p>
<p><code>SubscribeOn()</code> 은 Cold Stream 에 <code>Subscribe()</code> 를 할 때 Sequence 가 만들어지는 스케듈러를 바꾼다. 그래서 만약 <code>Publish()</code>/<code>Connect()</code> 를 쓰면 적용되지 않는다.</p>
<h2 id="참고자료">참고자료</h2>
<p><a href="https://learn.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh211887(v=vs.103)">msdn IConnectableObservable&#x3C;T> Interface</a></p>b:["categories","programming/pattern/observable","c"]
0:["wMEO4hI0eHvirG83ZLubb",[[["",{"children":["blog",{"children":[["categories","programming/pattern/observable","c"],{"children":["__PAGE__?{\"categories\":[\"programming\",\"pattern\",\"observable\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","programming/pattern/observable","c"],{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"Observable 에 관한 메모"}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/programming/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"programming"}]]}],["$","div","/blog/programming/pattern/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"pattern"}]]}],["$","div","/blog/programming/pattern/observable/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/observable/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"observable"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center   tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"9/26/2023"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","div",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["design pattern","c#"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/mvvm-disign-pattern","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"MVVM 에서 사용하는 Design Pattern"}]]}]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/dto","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"DTO"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1   tw-border-2 tw-rounded-2xl tw-border-color-border   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/dto","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"DTO"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm    tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Data Transport Object 의 역할"}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1   tw-border-2 tw-rounded-2xl tw-border-color-border   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/programming/pattern/mvvm-disign-pattern","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"MVVM 에서 사용하는 Design Pattern"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm    tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":""}]]}]]}]}]}]}]]}]]}]]}],null]]},[null,["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/601f73c9b9392328.css","precedence":"next","crossOrigin":""}]]}],null]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background"}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/ec704c0fcbda5c8f.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Observable 에 관한 메모"}],["$","meta","3",{"name":"description","content":"Observable 의 여러 기능. Hot/Cold Stream , 스레드 동기화 등"}],["$","link","4",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","5",{"name":"author","content":"Mona04"}],["$","meta","6",{"name":"category","content":"/blog/programming/pattern/observable"}],["$","link","7",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/programming/pattern/observable"}],["$","link","8",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
