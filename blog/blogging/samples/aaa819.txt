1:HL["/study-log/_next/static/css/51482d48e1d52c77.css",{"as":"style"}]
0:["J6THp8T1QUMv7mN9gB9qP",[[["",{"children":["blog",{"children":[["categories","blogging/samples/aaa819","c"],{"children":["__PAGE__?{\"categories\":[\"blogging\",\"samples\",\"aaa819\"]}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/51482d48e1d52c77.css","precedence":"next"}]],"$L3"]]]]
4:I{"id":5392,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"ContextProvider","async":false}
5:I{"id":5656,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
6:I{"id":57,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
7:I{"id":5003,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
8:I{"id":3084,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
9:I{"id":3677,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
a:I{"id":3119,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
b:I{"id":7674,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
c:I{"id":4277,"chunks":["929:static/chunks/4f9d9cd8-4e2da51b8f15e759.js","712:static/chunks/3627521c-2c02ffe699de489f.js","685:static/chunks/685-d24e8e96f673298e.js","185:static/chunks/app/layout-efa784304a0507a5.js"],"name":"","async":false}
d:I{"id":7767,"chunks":["272:static/chunks/webpack-f4ed9418fc0e32ad.js","971:static/chunks/fd9d1056-c4b752c762ad4496.js","596:static/chunks/596-eb6abf128d61afe5.js"],"name":"default","async":false}
e:I{"id":7920,"chunks":["272:static/chunks/webpack-f4ed9418fc0e32ad.js","971:static/chunks/fd9d1056-c4b752c762ad4496.js","596:static/chunks/596-eb6abf128d61afe5.js"],"name":"default","async":false}
10:I{"id":99,"chunks":["685:static/chunks/685-d24e8e96f673298e.js","722:static/chunks/722-003b4cf29a15022f.js","631:static/chunks/app/blog/[...categories]/page-70f074bc5f4c796e.js"],"name":"","async":false}
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"AAA"}],["$","meta","2",{"name":"description","content":"..."}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
11:T70fc,<h2 id="Quote">Quote</h2>
<blockquote>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<ul>
<li>kkk</li>
</ul>
<ul>
<li>item1</li>
<li>item2
<ul>
<li>item3</li>
<li>item4</li>
</ul>
</li>
<li>item4</li>
</ul>
<p><code>mycode</code>
Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<p>—— hikaru</p>
</blockquote>
<hr>
<ul>
<li>item1
<ul>
<li>subitem1</li>
<li>subitem2</li>
</ul>
</li>
<li>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</li>
<li>item3
<ul>
<li>asdf</li>
</ul>
</li>
</ul>
<ol>
<li>item1
<ul>
<li>subitem1</li>
<li>subitem2</li>
</ul>
</li>
<li>item2</li>
<li>item3
<ol>
<li>asdf</li>
</ol>
</li>
</ol>
<h2 id="GFM">GFM</h2>
<h3 id="Autolink literals">Autolink literals</h3>
<p><a href="http://www.example.com">www.example.com</a>, <a href="https://example.com">https://example.com</a>, and <a href="mailto:contact@example.com">contact@example.com</a>.</p>
<h3 id="Footnote">Footnote</h3>
<p>A note<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<h3 id="Strikethrough">Strikethrough</h3>
<p><del>one</del> or <del>two</del> tildes.</p>
<h3 id="Table">Table</h3>
<table>
<thead>
<tr>
<th>a</th>
<th align="left">b</th>
<th align="right">c</th>
<th align="center">d</th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th>제목 셀1</th>
<th align="center">제목 셀2</th>
<th align="left">제목 셀3</th>
<th align="right">제목 셀4</th>
</tr>
</thead>
<tbody>
<tr>
<td>내용 1</td>
<td align="center">내용 2</td>
<td align="left">내용 3</td>
<td align="right">내용 4</td>
</tr>
<tr>
<td>내용 5</td>
<td align="center">내용 6</td>
<td align="left">내용 7</td>
<td align="right">내용 8</td>
</tr>
<tr>
<td>내용 9</td>
<td align="center">내용 10</td>
<td align="left">내용 11</td>
<td align="right">내용 12</td>
</tr>
</tbody>
</table>
<h3 id="Tasklist">Tasklist</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> to do</li>
<li class="task-list-item"><input type="checkbox" checked disabled> done</li>
</ul>
<h2 id="Test">Test</h2>
<blockquote>
<p>hFar far away, behind the word mountains, <span class="math math-inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.07ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5776.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-1-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g></g><g data-mml-node="mo" transform="translate(2610.4,0)"><use data-c="2265" xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mo" transform="translate(3666.2,0)"><use data-c="2211" xlink:href="#MJX-1-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4888.9,0)"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g></g></g></g></svg></mjx-container></span></p>
</blockquote>
<p><code>inlinecode</code>, <span data-rehype-pretty-code-fragment=""><code data-language="js" data-theme="default" style="background-color: #22272e"><span class="line"><span style="color: #ADBAC7">inlinecode </span><span style="color: #F47067">with</span><span style="color: #ADBAC7"> lang</span></span></code></span></p>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h3 id="Test">Test</h3>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h4 id="Test">Test</h4>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h5 id="Test">Test</h5>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h6 id="Test">Test</h6>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h2 id="Code Syntax Highlight Test">Code Syntax Highlight Test</h2>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
">main.cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-line-numbers="" style="counter-set: line 0;display: grid;" data-language="cpp" data-theme="default" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">()</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line=""><span style="color: #ADBAC7">  </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">  cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre><div data-rehype-pretty-code-caption="" data-language="cpp" data-theme="default">adsf</div></div>
<p><span data-rehype-pretty-code-fragment=""><code data-language=".token" data-theme="default"><span style="color:#dcbdfb">cout</span></code></span> is good</p>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="default" data-code="using System;

class Program
{
    static void Main()
    {
        Console.WriteLine(&#x22;Hello, World!&#x22;);
    }
}
">c#<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="c#" data-theme="default"><code data-line-numbers="" data-language="c#" data-theme="default" style="display: grid;" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">System</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""> </span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">class</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">Program</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">static</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">Main</span><span style="color: #ADBAC7">()</span></span>
<span data-line=""><span style="color: #ADBAC7">    {</span></span>
<span data-line=""><span style="color: #ADBAC7">        Console.</span><span style="color: #DCBDFB">WriteLine</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"</span><span style="color: #96D0FF" data-highlighted-chars="">Hello</span><span style="color: #96D0FF">, World!"</span><span style="color: #ADBAC7">);</span></span>
<span data-line=""><span style="color: #ADBAC7">    }</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="js" data-theme="default" data-code="const [age, setAge] = useState(50);
const [name, setName] = useState(&#x27;Taylor&#x27;);
">js<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default" style="display: grid;"><span data-line=""><span style="color: #F47067">const</span><span style="color: #ADBAC7"> [</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="v">age</span><span style="color: #ADBAC7">, </span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="s">setAge</span><span style="color: #ADBAC7">] </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">useState</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="i">50</span><span style="color: #ADBAC7">);</span></span>
<span data-line=""><span style="color: #F47067">const</span><span style="color: #ADBAC7"> [</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="v">name</span><span style="color: #ADBAC7">, </span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="s">setName</span><span style="color: #ADBAC7">] </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">useState</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF" data-highlighted-chars="" data-chars-id="i">'Taylor'</span><span style="color: #ADBAC7">);</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
">main.cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-line-numbers="" style="counter-set: line 0;display: grid;" data-language="cpp" data-theme="default" data-line-numbers-max-digits="1"><span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">()</span></span>
<span data-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">  </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">  cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre><div data-rehype-pretty-code-caption="" data-language="cpp" data-theme="default">adsf</div></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
    srand(time(0));  // Seed the random number generator with current time
    int secretNumber = rand() % 100 + 1;  // Generate a random number between 1 and 100
    int guess;
    int tries = 0;

    cout << &#x22;Welcome to the Guess the Number game!&#x22; << endl;
    cout << &#x22;I&#x27;m thinking of a number between 1 and 100. Can you guess it?&#x22; << endl;

    do {
        cout << &#x22;Enter your guess: &#x22;;
        cin >> guess;
        tries++;

        if (guess < secretNumber) {
            cout << &#x22;Too low! Try again.&#x22; << endl;
        } else if (guess > secretNumber) {
            cout << &#x22;Too high! Try again.&#x22; << endl;
        } else {
            cout << &#x22;Congratulations! You guessed the number &#x22; << secretNumber << &#x22; in &#x22; << tries << &#x22; tries.&#x22; << endl;
        }
    } while (guess != secretNumber);

    return 0;
}

">cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-language="cpp" data-theme="default" style="display: grid;"><span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;ctime></span></span>
<span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;cstdlib></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #F47067">int</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">() {</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #DCBDFB">srand</span><span style="color: #ADBAC7">(</span><span style="color: #DCBDFB">time</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">));</span><span style="color: #768390">  // Seed the random number generator with current time</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> secretNumber </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">rand</span><span style="color: #ADBAC7">() </span><span style="color: #F47067">%</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">100</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">+</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">1</span><span style="color: #ADBAC7">;</span><span style="color: #768390">  // Generate a random number between 1 and 100</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> guess;</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> tries </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Welcome to the Guess the Number game!"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">    cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"I'm thinking of a number between 1 and 100. Can you guess it?"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">do</span><span style="color: #ADBAC7"> {</span></span>
<span data-line=""><span style="color: #ADBAC7">        cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Enter your guess: "</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">        cin </span><span style="color: #F47067">>></span><span style="color: #ADBAC7"> guess;</span></span>
<span data-line=""><span style="color: #ADBAC7">        tries</span><span style="color: #F47067">++</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">        </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">&#x3C;</span><span style="color: #ADBAC7"> secretNumber) {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Too low! Try again."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        } </span><span style="color: #F47067">else</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">></span><span style="color: #ADBAC7"> secretNumber) {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Too high! Try again."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        } </span><span style="color: #F47067">else</span><span style="color: #ADBAC7"> {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Congratulations! You guessed the number "</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> secretNumber </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">" in "</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> tries </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">" tries."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        }</span></span>
<span data-line=""><span style="color: #ADBAC7">    } </span><span style="color: #F47067">while</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">!=</span><span style="color: #ADBAC7"> secretNumber);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">return</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span>
<span data-line=""> </span></code></pre></div>
<p>한글입니다.</p>
<p><a href="https://delba.dev/blog/next-blog-build-time-syntax-highlighting">https://delba.dev/blog/next-blog-build-time-syntax-highlighting</a>
<a href="https://rehype-pretty-code.netlify.app/">https://rehype-pretty-code.netlify.app/</a>
<a href="https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js">https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js</a>
<a href="https://tailwindcss.com/docs/using-with-preprocessors">https://tailwindcss.com/docs/using-with-preprocessors</a>
<a href="https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js">https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js</a></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="Footnotes">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>Big note. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section><style>
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
</style>12:T16c5,
## Quote

> Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.
> - kkk
> + item1
> + item2
>   + item3
>   + item4
> + item4
>
> ```mycode```
> Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.
> 
> &mdash;&mdash; hikaru

----- 
+ item1
  + subitem1
  + subitem2
+ Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.
+ item3
  + asdf


1. item1
   + subitem1
   + subitem2
2. item2
3. item3
   1. asdf


## GFM

### Autolink literals

www.example.com, https://example.com, and contact@example.com.

### Footnote

A note[^1]

[^1]: Big note.

### Strikethrough

~one~ or ~~two~~ tildes.

### Table

| a | b  |  c |  d  |
| - | :- | -: | :-: |


|제목 셀1|제목 셀2|제목 셀3|제목 셀4|
|--|:--:|:--|--:|
|내용 1|내용 2|내용 3|내용 4|
|내용 5|내용 6|내용 7|내용 8|
|내용 9|내용 10|내용 11|내용 12|

### Tasklist

* [ ] to do
* [x] done



## Test 

> hFar far away, behind the word mountains, $$\log{N} \geq \sum{N}$$

```inlinecode```, ```inlinecode with lang{:js}```

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.


### Test

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.

#### Test

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.

##### Test

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.

###### Test

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.

Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.




## Code Syntax Highlight Test


```cpp title="main.cpp" caption="adsf" showLineNumbers{1} {1,3-4} 
#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
```

```cout{:.a}``` is good

```c# {1-3,4} showLineNumbers /Hello/
using System;

class Program
{
    static void Main()
    {
        Console.WriteLine("Hello, World!");
    }
}
```

```js /age/#v /name/#v /setAge/#s /setName/#s /50/#i /'Taylor'/#i
const [age, setAge] = useState(50);
const [name, setName] = useState('Taylor');
```

```cpp title="main.cpp" caption="adsf" showLineNumbers{1} {2-3,5} 
#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
```

```cpp
#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
    srand(time(0));  // Seed the random number generator with current time
    int secretNumber = rand() % 100 + 1;  // Generate a random number between 1 and 100
    int guess;
    int tries = 0;

    cout << "Welcome to the Guess the Number game!" << endl;
    cout << "I'm thinking of a number between 1 and 100. Can you guess it?" << endl;

    do {
        cout << "Enter your guess: ";
        cin >> guess;
        tries++;

        if (guess < secretNumber) {
            cout << "Too low! Try again." << endl;
        } else if (guess > secretNumber) {
            cout << "Too high! Try again." << endl;
        } else {
            cout << "Congratulations! You guessed the number " << secretNumber << " in " << tries << " tries." << endl;
        }
    } while (guess != secretNumber);

    return 0;
}

```

한글입니다.

https://delba.dev/blog/next-blog-build-time-syntax-highlighting
https://rehype-pretty-code.netlify.app/
https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js
https://tailwindcss.com/docs/using-with-preprocessors
https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js13:T70fc,<h2 id="Quote">Quote</h2>
<blockquote>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<ul>
<li>kkk</li>
</ul>
<ul>
<li>item1</li>
<li>item2
<ul>
<li>item3</li>
<li>item4</li>
</ul>
</li>
<li>item4</li>
</ul>
<p><code>mycode</code>
Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<p>—— hikaru</p>
</blockquote>
<hr>
<ul>
<li>item1
<ul>
<li>subitem1</li>
<li>subitem2</li>
</ul>
</li>
<li>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</li>
<li>item3
<ul>
<li>asdf</li>
</ul>
</li>
</ul>
<ol>
<li>item1
<ul>
<li>subitem1</li>
<li>subitem2</li>
</ul>
</li>
<li>item2</li>
<li>item3
<ol>
<li>asdf</li>
</ol>
</li>
</ol>
<h2 id="GFM">GFM</h2>
<h3 id="Autolink literals">Autolink literals</h3>
<p><a href="http://www.example.com">www.example.com</a>, <a href="https://example.com">https://example.com</a>, and <a href="mailto:contact@example.com">contact@example.com</a>.</p>
<h3 id="Footnote">Footnote</h3>
<p>A note<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<h3 id="Strikethrough">Strikethrough</h3>
<p><del>one</del> or <del>two</del> tildes.</p>
<h3 id="Table">Table</h3>
<table>
<thead>
<tr>
<th>a</th>
<th align="left">b</th>
<th align="right">c</th>
<th align="center">d</th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th>제목 셀1</th>
<th align="center">제목 셀2</th>
<th align="left">제목 셀3</th>
<th align="right">제목 셀4</th>
</tr>
</thead>
<tbody>
<tr>
<td>내용 1</td>
<td align="center">내용 2</td>
<td align="left">내용 3</td>
<td align="right">내용 4</td>
</tr>
<tr>
<td>내용 5</td>
<td align="center">내용 6</td>
<td align="left">내용 7</td>
<td align="right">내용 8</td>
</tr>
<tr>
<td>내용 9</td>
<td align="center">내용 10</td>
<td align="left">내용 11</td>
<td align="right">내용 12</td>
</tr>
</tbody>
</table>
<h3 id="Tasklist">Tasklist</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled> to do</li>
<li class="task-list-item"><input type="checkbox" checked disabled> done</li>
</ul>
<h2 id="Test">Test</h2>
<blockquote>
<p>hFar far away, behind the word mountains, <span class="math math-inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.07ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5776.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-1-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(1278,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1444.7,0)"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g></g><g data-mml-node="mo" transform="translate(2610.4,0)"><use data-c="2265" xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mo" transform="translate(3666.2,0)"><use data-c="2211" xlink:href="#MJX-1-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4888.9,0)"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g></g></g></g></svg></mjx-container></span></p>
</blockquote>
<p><code>inlinecode</code>, <span data-rehype-pretty-code-fragment=""><code data-language="js" data-theme="default" style="background-color: #22272e"><span class="line"><span style="color: #ADBAC7">inlinecode </span><span style="color: #F47067">with</span><span style="color: #ADBAC7"> lang</span></span></code></span></p>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h3 id="Test">Test</h3>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h4 id="Test">Test</h4>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h5 id="Test">Test</h5>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h6 id="Test">Test</h6>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<p>Far far away, behind the word mountains, far from the countries Vokalia and
Consonantia, there live the blind texts. Separated they live in Bookmarksgrove
right at the coast of the Semantics, a large language ocean. A small river named
Duden flows by their place and supplies it with the necessary regelialia.</p>
<h2 id="Code Syntax Highlight Test">Code Syntax Highlight Test</h2>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
">main.cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-line-numbers="" style="counter-set: line 0;display: grid;" data-language="cpp" data-theme="default" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">()</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line=""><span style="color: #ADBAC7">  </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">  cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre><div data-rehype-pretty-code-caption="" data-language="cpp" data-theme="default">adsf</div></div>
<p><span data-rehype-pretty-code-fragment=""><code data-language=".token" data-theme="default"><span style="color:#dcbdfb">cout</span></code></span> is good</p>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="c#" data-theme="default" data-code="using System;

class Program
{
    static void Main()
    {
        Console.WriteLine(&#x22;Hello, World!&#x22;);
    }
}
">c#<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="c#" data-theme="default"><code data-line-numbers="" data-language="c#" data-theme="default" style="display: grid;" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">System</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""> </span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">class</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">Program</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">static</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">Main</span><span style="color: #ADBAC7">()</span></span>
<span data-line=""><span style="color: #ADBAC7">    {</span></span>
<span data-line=""><span style="color: #ADBAC7">        Console.</span><span style="color: #DCBDFB">WriteLine</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"</span><span style="color: #96D0FF" data-highlighted-chars="">Hello</span><span style="color: #96D0FF">, World!"</span><span style="color: #ADBAC7">);</span></span>
<span data-line=""><span style="color: #ADBAC7">    }</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="js" data-theme="default" data-code="const [age, setAge] = useState(50);
const [name, setName] = useState(&#x27;Taylor&#x27;);
">js<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="js" data-theme="default"><code data-language="js" data-theme="default" style="display: grid;"><span data-line=""><span style="color: #F47067">const</span><span style="color: #ADBAC7"> [</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="v">age</span><span style="color: #ADBAC7">, </span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="s">setAge</span><span style="color: #ADBAC7">] </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">useState</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="i">50</span><span style="color: #ADBAC7">);</span></span>
<span data-line=""><span style="color: #F47067">const</span><span style="color: #ADBAC7"> [</span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="v">name</span><span style="color: #ADBAC7">, </span><span style="color: #6CB6FF" data-highlighted-chars="" data-chars-id="s">setName</span><span style="color: #ADBAC7">] </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">useState</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF" data-highlighted-chars="" data-chars-id="i">'Taylor'</span><span style="color: #ADBAC7">);</span></span></code></pre></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
using namespace std;
void main()
{
  int a = 0;
  cout << a << endl;
}
">main.cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-line-numbers="" style="counter-set: line 0;display: grid;" data-language="cpp" data-theme="default" data-line-numbers-max-digits="1"><span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">()</span></span>
<span data-line=""><span style="color: #ADBAC7">{</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #ADBAC7">  </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">  cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> a </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span></code></pre><div data-rehype-pretty-code-caption="" data-language="cpp" data-theme="default">adsf</div></div>
<div data-rehype-pretty-code-fragment=""><div data-rehype-pretty-code-title="" data-language="cpp" data-theme="default" data-code="#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
    srand(time(0));  // Seed the random number generator with current time
    int secretNumber = rand() % 100 + 1;  // Generate a random number between 1 and 100
    int guess;
    int tries = 0;

    cout << &#x22;Welcome to the Guess the Number game!&#x22; << endl;
    cout << &#x22;I&#x27;m thinking of a number between 1 and 100. Can you guess it?&#x22; << endl;

    do {
        cout << &#x22;Enter your guess: &#x22;;
        cin >> guess;
        tries++;

        if (guess < secretNumber) {
            cout << &#x22;Too low! Try again.&#x22; << endl;
        } else if (guess > secretNumber) {
            cout << &#x22;Too high! Try again.&#x22; << endl;
        } else {
            cout << &#x22;Congratulations! You guessed the number &#x22; << secretNumber << &#x22; in &#x22; << tries << &#x22; tries.&#x22; << endl;
        }
    } while (guess != secretNumber);

    return 0;
}

">cpp<button></button></div><pre style="background-color: #22272e" tabindex="0" data-language="cpp" data-theme="default"><code data-language="cpp" data-theme="default" style="display: grid;"><span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;iostream></span></span>
<span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;ctime></span></span>
<span data-line=""><span style="color: #F47067">#include</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">&#x3C;cstdlib></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #F47067">using</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">namespace</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50">std</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #F47067">int</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">main</span><span style="color: #ADBAC7">() {</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #DCBDFB">srand</span><span style="color: #ADBAC7">(</span><span style="color: #DCBDFB">time</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">));</span><span style="color: #768390">  // Seed the random number generator with current time</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> secretNumber </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">rand</span><span style="color: #ADBAC7">() </span><span style="color: #F47067">%</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">100</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">+</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">1</span><span style="color: #ADBAC7">;</span><span style="color: #768390">  // Generate a random number between 1 and 100</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> guess;</span></span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">int</span><span style="color: #ADBAC7"> tries </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Welcome to the Guess the Number game!"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">    cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"I'm thinking of a number between 1 and 100. Can you guess it?"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">do</span><span style="color: #ADBAC7"> {</span></span>
<span data-line=""><span style="color: #ADBAC7">        cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Enter your guess: "</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">        cin </span><span style="color: #F47067">>></span><span style="color: #ADBAC7"> guess;</span></span>
<span data-line=""><span style="color: #ADBAC7">        tries</span><span style="color: #F47067">++</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">        </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">&#x3C;</span><span style="color: #ADBAC7"> secretNumber) {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Too low! Try again."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        } </span><span style="color: #F47067">else</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">></span><span style="color: #ADBAC7"> secretNumber) {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Too high! Try again."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        } </span><span style="color: #F47067">else</span><span style="color: #ADBAC7"> {</span></span>
<span data-line=""><span style="color: #ADBAC7">            cout </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Congratulations! You guessed the number "</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> secretNumber </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">" in "</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> tries </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">" tries."</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&#x3C;&#x3C;</span><span style="color: #ADBAC7"> endl;</span></span>
<span data-line=""><span style="color: #ADBAC7">        }</span></span>
<span data-line=""><span style="color: #ADBAC7">    } </span><span style="color: #F47067">while</span><span style="color: #ADBAC7"> (guess </span><span style="color: #F47067">!=</span><span style="color: #ADBAC7"> secretNumber);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #ADBAC7">    </span><span style="color: #F47067">return</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></span>
<span data-line=""><span style="color: #ADBAC7">}</span></span>
<span data-line=""> </span></code></pre></div>
<p>한글입니다.</p>
<p><a href="https://delba.dev/blog/next-blog-build-time-syntax-highlighting">https://delba.dev/blog/next-blog-build-time-syntax-highlighting</a>
<a href="https://rehype-pretty-code.netlify.app/">https://rehype-pretty-code.netlify.app/</a>
<a href="https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js">https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js</a>
<a href="https://tailwindcss.com/docs/using-with-preprocessors">https://tailwindcss.com/docs/using-with-preprocessors</a>
<a href="https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js">https://www.mridul.tech/blogs/how-to-use-scss-with-tailwind-in-next-js</a></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="Footnotes">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>Big note. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section><style>
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
  min-height: 1px;
  min-width: 1px;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line], svg[data-table] > g > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

mjx-container[jax="SVG"] path[data-c], mjx-container[jax="SVG"] use[data-c] {
  stroke-width: 3;
}
</style>2:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function() {\n    function setInitialColorMode() {\n    /**\r\n   * 만약 localStorage 가 유효하지 않다면 => media 설정으로 처리\r\n   * 만약 localStorage 가 유효하다면 => local Storage 로 처리\r\n   */ if (localStorage.getItem(\"theme\") == null && window.matchMedia(\"(prefers-color-scheme: dark)\").matches || localStorage.getItem(\"theme\") == \"dark\") {\n        document.documentElement.setAttribute(\"data-theme\", \"dark\");\n    }\n}\n    setInitialColorMode();\n  })()\n"}}],["$","link",null,{"rel":"stylesheet","href":"//fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$L4",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$L5",null,{}],["$","a",null,{"className":"tw-grow tw-self-center tw-ml-1   tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl   hover:tw-text-color-text ","href":"/study-log/","rel":"$undefined","target":"_self","onClick":"$undefined","children":"LOG | STUDY"}],["$","$L6",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$L7",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L8",null,{"className":"tw-z-10"}],["$","aside",null,{"children":["$","$L9",null,{"children":["$","div",null,{"className":"sidebar_sidebar__Wqt36","children":[["$","$La",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$La","/blog",{"slug":"/blog","label":"BLOG","refCount":1017,"depth":0,"children":[["$","$La","/blog/blogging",{"slug":"/blog/blogging","label":"BLOGGING","refCount":1004,"depth":1,"children":[["$","$La","/blog/blogging/test",{"slug":"/blog/blogging/test","label":"TEST","refCount":2,"depth":2,"children":"$undefined"}],["$","$La","/blog/blogging/samples",{"slug":"/blog/blogging/samples","label":"SAMPLES","refCount":1000,"depth":2,"children":"$undefined"}]]}],["$","$La","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":7,"depth":1,"children":[["$","$La","/blog/study/wpf",{"slug":"/blog/study/wpf","label":"WPF","refCount":1,"depth":2,"children":"$undefined"}]]}],["$","$La","/blog/web",{"slug":"/blog/web","label":"WEB","refCount":2,"depth":1,"children":"$undefined"}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$Lb",null,{"children":["$","$Lc",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pt-1 tw-pb-52","children":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[],"childProp":{"current":["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[null,["$","$Ld",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["categories","blogging/samples/aaa819","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$Le",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lf",[["$","$L10",null,{"post":{"isMDX":false,"slug":"/blog/blogging/samples/aaa819","content":"$11","raw":"$12","title":"AAA","description":"$undefined","date":"2015-05-27T15:00:00.000Z"}}],["$","article",null,{"children":[["$","meta",null,{"itemProp":"headline","content":"AAA"}],["$","meta",null,{"itemProp":"description","content":"$undefined"}],["$","meta",null,{"itemProp":"datePublished","content":"2015-05-27T15:00:00.000Z"}],[["$","h1",null,{"className":"text-3xl font-bold","children":"AAA"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}]]]}]],null],"segment":"__PAGE__?{\"categories\":[\"blogging\",\"samples\",\"aaa819\"]}"},"styles":[]}],null],"segment":["categories","blogging/samples/aaa819","c"]},"styles":[]}],"segment":"blog"},"styles":[]}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95  tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4   dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","a",null,{"className":"tw-flex tw-self-center","href":"/study-loghttps://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2023 Mona04. Powered by ",["$","a",null,{"className":"$undefined","href":"/study-loghttps://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","children":"NextJS"}]," & ",["$","a",null,{"className":"$undefined","href":"/study-loghttps://contentlayer.dev/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","children":"ContentLayer"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto   phone:tw-absolute phone:tw-collapse","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"12:42"}],["$","div",null,{"className":"tw-ml-1","children":"2023/11/2"}]]}]]}]}]}]]}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n  (function() {\n    function copyButtonScript() {\n    if (!document) return;\n    const titlebars = document.querySelectorAll(\"[data-rehype-pretty-code-title]\");\n    for (const titlebar of titlebars){\n        var buttons = titlebar.getElementsByTagName(\"button\");\n        for (const button of buttons){\n            button.addEventListener(\"click\", function() {\n                if (navigator.clipboard) {\n                    var code = titlebar.getAttribute(\"data-code\");\n                    if (code != null) {\n                        navigator.clipboard.writeText(code);\n                        button.setAttribute(\"checked\", \"true\");\n                        button.disabled = true;\n                    }\n                    setTimeout(()=>{\n                        button.removeAttribute(\"checked\");\n                        button.disabled = false;\n                    }, 2000);\n                }\n            });\n        }\n    }\n}\n    copyButtonScript();\n  })()\n"},"defer":true}]]}]}],null]
f:null
