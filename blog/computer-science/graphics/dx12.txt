2:I[5250,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],""]
3:I[8646,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],""]
6:I[1558,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],""]
7:I[4507,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],""]
8:I[4626,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],"WithTooltip"]
9:I[3991,["700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","799","static/chunks/799-7b8e5d14f8ee1725.js","198","static/chunks/198-e700a23c67fed8ca.js","631","static/chunks/app/blog/%5B...categories%5D/page-8fd19c90d71ad35f.js"],""]
a:I[5613,[],""]
c:I[1778,[],""]
d:I[198,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],"ContextProvider"]
e:I[5990,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
f:I[8427,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
10:I[1052,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
11:I[7380,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
12:I[6960,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
13:I[9961,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
14:I[3915,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
15:I[4956,["929","static/chunks/4f9d9cd8-056db5515ffffa0d.js","712","static/chunks/3627521c-62f75f9ff2a6f39a.js","700","static/chunks/700-64528b002ca1adec.js","612","static/chunks/612-2fd8501fd183cd16.js","198","static/chunks/198-e700a23c67fed8ca.js","983","static/chunks/983-a1d1e64461b888f1.js","185","static/chunks/app/layout-c26416baec6ac789.js"],""]
4:T159f,
## 기초 지식

### COM(Component Object Model)

COM 은 모통 COM Interface 라고 부르는데 DX 의 클래스 역시 마찬가지다. 중요한 특징은 다음과 같다.

1. ```IUnknown``` 이라는 클래스를 상속한다.
2. 외부에서 생성 및 소멸 시킬 수 없으며 함수를 통해서 얻을 수만 있다.
3. 대신 참조횟수를 가지고 있어서 0 이 되면 스스로 삭제한다. 외부에서 다 사용하면 ```Release()``` 를 통해 참조횟수를 내려야한다.

```Microsoft::WRL::ComPtr``` 이라는 COM Interface 용 스마트 포인터가 있으니 참고.


3Ds Max, Maya, Blender 가 유명한 3D Modeling Program 이다. 3Ds Max 를 개발했고 후에  Maya 를 인수한 Autodesk 에서 FBX 포맷을 만들었고 현재도 가장 대중적인 포맷으로 자리잡는다.

### Adapter

기본적으로 하드웨어 장치(그래픽카드)에 대응되나 소프트웨어 어댑터도 존재한다.


### CommandList

cpu 멀티 스레드를 위해 디자인되었다. 예를들어 많은 물체를 그려야한다면 여러 스레드에서 각각 그리기 명령을 수행하면 cpu 연산 시간이 줄어들 것이다.

1. CommandList 에 명령을 추가하는 것은 threadsafe 하지 않다. 이는 CommandListAllocator 도 마찬가지이다. 그래서 여러 CommandList 가 여러 thread 에서 각각 존재해야한다.
2. 대신 CommandQueue 는 threadsafe 하다. 그래서 하나의 CommandQueue 를 사용해도 큰 문제가 없다.
3. 응용프로그램은 동시에 기록할 수 있는 명령 목록들의 최대갯수를 반드시 초기화시점에서 처리해야한다.


### RootSignature

```
Root Constant > Inline Root Descriptor > Descriptor Table
```

위 순으로 더 빠르다. 

[자료](https://velog.io/@15ywt/DirectX12-Root-Signature)

### PSO


### descriptor

dx11 까지의 ```view``` 에 해당되는 ```descriptor``` 는 단순한 메모리 파편인 ```resource``` 에 대한 접근과 정보를 담고 있다. gpu pipeline 는 binding 된 descriptor  를 사용해 이를 통해 실제 resource 을 접근하고 사용에 필요한 정보를 획득한다.

한 resource 에 대해 여러 descriptor 를 생성할 수 있고 이를 ```descriptor heap``` 에 저장한다. 예를들어 vs, ps 에 모두 사용되는 텍스쳐를 위해 두 descriptor 를 만들 수 있다.

보통 프로그램 초기화 단계에서 생성해놓는다. 무형식 resource 는 형식 resource 의 최적화가 들어가 있지 않으므로 여러 형식의 descriptor 가 만들어지는 경우에만 만드는 것이 좋다.



[MSDN](https://learn.microsoft.com/en-us/previous-versions//dn899216(v=vs.85)?redirectedfrom=MSDN)

[Descripor-Heap](https://velog.io/@15ywt/DirectX12-Descriptor-Heap)

[Heap](https://zhangdoa.com/posts/walking-through-the-heap-properties-in-directx-12)


## .etc

Vertex Buffer 의 Slot 은 보통은 많이 있으면 성능상 좋지 않다. 보통은 대개 1~3 개를 사용한다.

Constant Buffer 역시 성능상의 이유로 쉐이더가 5개 미만 사용하는 것을 권한다.^[dxtex1](p327)

hlsl 은 matrix 저장 순서가 [column major](https://learn.microsoft.com/ko-kr/windows/win32/direct3dhlsl/dx-graphics-hlsl-per-component-math?redirectedfrom=MSDN#matrix-ordering) 이다. 그래서 ```m[0][0]```, ```m[1][0]``` 이런식으로 저장되는데 cpu 에선 보통 row major 방식을 많이 써서 Transposed 된 듯한 느낌을 준다.

```wrl.h``` 의 ```Microsoft::WRL::ComPtr``` 을 이용해 Com Smart Pointer 를 이용할 수 있다.


[Multi-Adapter System](https://learn.microsoft.com/en-us/windows/win32/direct3d12/multi-engine)


## Issue

[DX12 는 VisualStudio 의 Debugging 을 못한다?](https://devblogs.microsoft.com/pix/download/)


## Multi Threading

[MSDN - Multi Engine](https://learn.microsoft.com/en-us/windows/win32/direct3d12/user-mode-heap-synchronization)

[MSDN - Recording Command List and Bundles](https://learn.microsoft.com/en-us/windows/win32/direct3d12/recording-command-lists-and-bundles)

[MSDN - Synchronizing Command Lists](https://learn.microsoft.com/en-us/windows/win32/direct3d12/executing-and-synchronizing-command-lists)

### Command Queue

Compute / 3D Rendering 에서 GPU 의 다른 부분을 쓸 수도 있기 때문에 각각에 용도에 맞게 생성하면 동시성 강화 가능

### Command Allocator

```Reset()```
+ 하기 전에 여기에 있는 커맨드들이 실행 중이 아님이 보장되어야 한다. 연결된 Command Queue 가 끝나고 호출하면 된다.

메모리가 증가는 하는데 줄지는 않는다.

### Command List

```Reset()```
+ Command Allocator 와 연결하며 자신은 쓰기 상태가 된다. Allocator 에 한번에 하나의 List 만 쓸 수 있다. 즉 한 Allocator 에 여러 List 가 연결될 수 는 있으나 각 List 가 다른 Thread 에 있다면 Critical Section 이 필요하다는 뜻이다. 그래서 보통 Thread 당 Allocator 와 List 를 하나씩 둔다.
+ 언제든지 가능하므로 일정 단위마다 ```Close()``` 한 후에 Queue 에 넣고 다시 ```Reset()``` 해서 진행하는 패턴이 잘 사용된다.



## 참고자료

[MSDN Direct3D Learning](https://learn.microsoft.com/en-us/windows/win32/direct3d12/direct3d-12-graphics)

^[dxtex1]: [DirectX12 를 이용한 게임프로그래밍 입문](https://www.hanbit.co.kr/store/books/look.php?p_code=B5088646371)

5:T188f,<div id="기초-지식">기초 지식<button title="code-copy-btn"></button></div>
<h3 id="COM(Component-Object-Model)">COM(Component Object Model)</h3>
<p>COM 은 모통 COM Interface 라고 부르는데 DX 의 클래스 역시 마찬가지다. 중요한 특징은 다음과 같다.</p>
<ol>
<li><code>IUnknown</code> 이라는 클래스를 상속한다.</li>
<li>외부에서 생성 및 소멸 시킬 수 없으며 함수를 통해서 얻을 수만 있다.</li>
<li>대신 참조횟수를 가지고 있어서 0 이 되면 스스로 삭제한다. 외부에서 다 사용하면 <code>Release()</code> 를 통해 참조횟수를 내려야한다.</li>
</ol>
<p><code>Microsoft::WRL::ComPtr</code> 이라는 COM Interface 용 스마트 포인터가 있으니 참고.</p>
<p>3Ds Max, Maya, Blender 가 유명한 3D Modeling Program 이다. 3Ds Max 를 개발했고 후에  Maya 를 인수한 Autodesk 에서 FBX 포맷을 만들었고 현재도 가장 대중적인 포맷으로 자리잡는다.</p>
<h3 id="Adapter">Adapter</h3>
<p>기본적으로 하드웨어 장치(그래픽카드)에 대응되나 소프트웨어 어댑터도 존재한다.</p>
<h3 id="CommandList">CommandList</h3>
<p>cpu 멀티 스레드를 위해 디자인되었다. 예를들어 많은 물체를 그려야한다면 여러 스레드에서 각각 그리기 명령을 수행하면 cpu 연산 시간이 줄어들 것이다.</p>
<ol>
<li>CommandList 에 명령을 추가하는 것은 threadsafe 하지 않다. 이는 CommandListAllocator 도 마찬가지이다. 그래서 여러 CommandList 가 여러 thread 에서 각각 존재해야한다.</li>
<li>대신 CommandQueue 는 threadsafe 하다. 그래서 하나의 CommandQueue 를 사용해도 큰 문제가 없다.</li>
<li>응용프로그램은 동시에 기록할 수 있는 명령 목록들의 최대갯수를 반드시 초기화시점에서 처리해야한다.</li>
</ol>
<h3 id="RootSignature">RootSignature</h3>
<pre><code>Root Constant > Inline Root Descriptor > Descriptor Table
</code></pre>
<p>위 순으로 더 빠르다.</p>
<p><a href="https://velog.io/@15ywt/DirectX12-Root-Signature">자료</a></p>
<h3 id="PSO">PSO</h3>
<h3 id="descriptor">descriptor</h3>
<p>dx11 까지의 <code>view</code> 에 해당되는 <code>descriptor</code> 는 단순한 메모리 파편인 <code>resource</code> 에 대한 접근과 정보를 담고 있다. gpu pipeline 는 binding 된 descriptor  를 사용해 이를 통해 실제 resource 을 접근하고 사용에 필요한 정보를 획득한다.</p>
<p>한 resource 에 대해 여러 descriptor 를 생성할 수 있고 이를 <code>descriptor heap</code> 에 저장한다. 예를들어 vs, ps 에 모두 사용되는 텍스쳐를 위해 두 descriptor 를 만들 수 있다.</p>
<p>보통 프로그램 초기화 단계에서 생성해놓는다. 무형식 resource 는 형식 resource 의 최적화가 들어가 있지 않으므로 여러 형식의 descriptor 가 만들어지는 경우에만 만드는 것이 좋다.</p>
<p><a href="https://learn.microsoft.com/en-us/previous-versions//dn899216(v=vs.85)?redirectedfrom=MSDN">MSDN</a></p>
<p><a href="https://velog.io/@15ywt/DirectX12-Descriptor-Heap">Descripor-Heap</a></p>
<p><a href="https://zhangdoa.com/posts/walking-through-the-heap-properties-in-directx-12">Heap</a></p>
<h2 id=".etc">.etc</h2>
<p>Vertex Buffer 의 Slot 은 보통은 많이 있으면 성능상 좋지 않다. 보통은 대개 1~3 개를 사용한다.</p>
<p>Constant Buffer 역시 성능상의 이유로 쉐이더가 5개 미만 사용하는 것을 권한다.^<a href="p327">dxtex1</a></p>
<p>hlsl 은 matrix 저장 순서가 <a href="https://learn.microsoft.com/ko-kr/windows/win32/direct3dhlsl/dx-graphics-hlsl-per-component-math?redirectedfrom=MSDN#matrix-ordering">column major</a> 이다. 그래서 <code>m[0][0]</code>, <code>m[1][0]</code> 이런식으로 저장되는데 cpu 에선 보통 row major 방식을 많이 써서 Transposed 된 듯한 느낌을 준다.</p>
<p><code>wrl.h</code> 의 <code>Microsoft::WRL::ComPtr</code> 을 이용해 Com Smart Pointer 를 이용할 수 있다.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/multi-engine">Multi-Adapter System</a></p>
<h2 id="Issue">Issue</h2>
<p><a href="https://devblogs.microsoft.com/pix/download/">DX12 는 VisualStudio 의 Debugging 을 못한다?</a></p>
<h2 id="Multi-Threading">Multi Threading</h2>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/user-mode-heap-synchronization">MSDN - Multi Engine</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/recording-command-lists-and-bundles">MSDN - Recording Command List and Bundles</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/executing-and-synchronizing-command-lists">MSDN - Synchronizing Command Lists</a></p>
<h3 id="Command-Queue">Command Queue</h3>
<p>Compute / 3D Rendering 에서 GPU 의 다른 부분을 쓸 수도 있기 때문에 각각에 용도에 맞게 생성하면 동시성 강화 가능</p>
<h3 id="Command-Allocator">Command Allocator</h3>
<p><code>Reset()</code></p>
<ul>
<li>하기 전에 여기에 있는 커맨드들이 실행 중이 아님이 보장되어야 한다. 연결된 Command Queue 가 끝나고 호출하면 된다.</li>
</ul>
<p>메모리가 증가는 하는데 줄지는 않는다.</p>
<h3 id="Command-List">Command List</h3>
<p><code>Reset()</code></p>
<ul>
<li>Command Allocator 와 연결하며 자신은 쓰기 상태가 된다. Allocator 에 한번에 하나의 List 만 쓸 수 있다. 즉 한 Allocator 에 여러 List 가 연결될 수 는 있으나 각 List 가 다른 Thread 에 있다면 Critical Section 이 필요하다는 뜻이다. 그래서 보통 Thread 당 Allocator 와 List 를 하나씩 둔다.</li>
<li>언제든지 가능하므로 일정 단위마다 <code>Close()</code> 한 후에 Queue 에 넣고 다시 <code>Reset()</code> 해서 진행하는 패턴이 잘 사용된다.</li>
</ul>
<h2 id="참고자료">참고자료</h2>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/direct3d-12-graphics">MSDN Direct3D Learning</a></p>
<p>^[dxtex1]: <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B5088646371">DirectX12 를 이용한 게임프로그래밍 입문</a></p>b:["categories","computer-science/graphics/dx12","c"]
0:["zhtOViwh_LDBdE06ipzhJ",[[["",{"children":["blog",{"children":[["categories","computer-science/graphics/dx12","c"],{"children":["__PAGE__?{\"categories\":[\"computer-science\",\"graphics\",\"dx12\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","computer-science/graphics/dx12","c"],{"children":["__PAGE__",{},["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"DirectX12"}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/computer-science/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"computer-science"}]]}],["$","div","/blog/computer-science/graphics/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"graphics"}]]}],["$","div","/blog/computer-science/graphics/dx12/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/dx12/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"dx12"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center   tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"11/9/2023"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","div",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["graphics"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/compute-shader","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"Particle System"}]]}]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/particle-system","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"Particle System"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1   tw-border-2 tw-rounded-2xl tw-border-color-border   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/compute-shader","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Particle System"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm    tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":""}]]}]]}]}]}]}],["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1   tw-border-2 tw-rounded-2xl tw-border-color-border   hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/graphics/particle-system","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":[["$","div",null,{"className":"mobile:tw-col-span-1 mobile:tw-h-20 desk:tw-max-h-40 desk:tw-mb-2 w-m-1 tw-border-2 tw-border-color-border ","children":["$","$L9",null,{"src":"/study-log/images/empty-300x200.jpg","alt":"Thumbnail","className":"tw-h-full tw-w-full","width":256,"height":256,"fill":"$undefined","priority":true,"children":null}]}],["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0    tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Particle System"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm    tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":""}]]}]]}]}]}]}]]}]]}]]}],null]]},[null,["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/601f73c9b9392328.css","precedence":"next","crossOrigin":""}]]}],null]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){try{(null==localStorage.getItem(\"theme\")&&window.matchMedia(\"(prefers-color-scheme: dark)\").matches||\"dark\"==localStorage.getItem(\"theme\"))&&document.documentElement.setAttribute(\"data-theme\",\"dark\")}catch(e){}})()"}}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$Ld",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$Le",null,{}],["$","$L2",null,{"className":"tw-self-center tw-ml-1   tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl   hover:tw-text-color-text","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"LOG | STUDY"}],["$","div",null,{"className":"tw-grow"}],["$","$Lf",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$L10",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L11",null,{}],["$","aside",null,{"children":["$","$L12",null,{"children":["$","div",null,{"className":"sidebar_sidebar__gN2ma","children":[["$","$L13",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/portfolio","label":"PORTFOLIO★","refCount":-1,"depth":0}],["$","$L13",null,{"slug":"/tags","label":"TAGS","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$L13","/blog",{"slug":"/blog","label":"BLOG","refCount":15,"depth":0,"children":[["$","$L13","/blog/blogging",{"slug":"/blog/blogging","label":"BLOGGING","refCount":2,"depth":1,"children":"$undefined"}],["$","$L13","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":2,"depth":1,"children":"$undefined"}],["$","$L13","/blog/computer-science",{"slug":"/blog/computer-science","label":"COMPUTER-SCIENCE","refCount":3,"depth":1,"children":[["$","$L13","/blog/computer-science/graphics",{"slug":"/blog/computer-science/graphics","label":"GRAPHICS","refCount":3,"depth":2,"children":"$undefined"}]]}],["$","$L13","/blog/programming",{"slug":"/blog/programming","label":"PROGRAMMING","refCount":8,"depth":1,"children":[["$","$L13","/blog/programming/pattern",{"slug":"/blog/programming/pattern","label":"PATTERN","refCount":3,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/web",{"slug":"/blog/programming/web","label":"WEB","refCount":3,"depth":2,"children":"$undefined"}],["$","$L13","/blog/programming/wpf",{"slug":"/blog/programming/wpf","label":"WPF","refCount":2,"depth":2,"children":"$undefined"}]]}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$L14",null,{"children":["$","$L15",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pb-52","children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95 tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4   mobile:tw-flex-col   dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","$L2",null,{"className":"tw-flex tw-self-center","href":"https://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2024 Mona04. Powered by ",["$","$L2",null,{"className":"$undefined","href":"https://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","prefetch":false,"children":"NextJS"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto mobile:tw-hidden","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"0:37"}],["$","div",null,{"className":"tw-ml-1","children":"2024/4/24"}]]}]]}]}]}]]}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){if(document)for(let e of document.querySelectorAll(\"[data-rehype-pretty-code-title]\"))for(let a of e.getElementsByTagName(\"button\"))a.addEventListener(\"click\",function(){if(navigator.clipboard){var n=e.getAttribute(\"data-code\");null!=n&&(navigator.clipboard.writeText(n),a.setAttribute(\"checked\",\"true\"),a.disabled=!0),setTimeout(()=>{a.removeAttribute(\"checked\"),a.disabled=!1},2e3)}})})()"},"defer":true}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/49299e86edeafaed.css","precedence":"next","crossOrigin":""}]],"$L16"]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"DirectX12"}],["$","link","3",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","4",{"name":"author","content":"Mona04"}],["$","meta","5",{"name":"category","content":"/blog/computer-science/graphics/dx12"}],["$","link","6",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/computer-science/graphics/dx12"}],["$","link","7",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
