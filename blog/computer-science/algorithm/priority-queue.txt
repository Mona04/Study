2:I[2972,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],""]
3:I[1824,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
6:I[7861,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
7:I[4497,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"default"]
8:I[3790,["827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","769","static/chunks/769-57d8baf6e86747a5.js","908","static/chunks/908-bc79b8cd607d20d8.js","631","static/chunks/app/blog/%5B...categories%5D/page-300900eda1b18e71.js"],"WithTooltip"]
9:I[4707,[],""]
b:I[6423,[],""]
c:I[4908,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"ContextProvider"]
d:I[1739,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
e:I[9813,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
f:I[4829,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
10:I[8127,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
11:I[2556,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
12:I[3268,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
13:I[8285,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
14:I[7656,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"default"]
15:I[5395,["929","static/chunks/4f9d9cd8-f52099ca3f429dbf.js","712","static/chunks/3627521c-b58503ab95e41863.js","827","static/chunks/827-56c00c95f5d3481c.js","597","static/chunks/597-c23ebfe96800db79.js","908","static/chunks/908-bc79b8cd607d20d8.js","185","static/chunks/app/layout-d7ed5629246590d8.js"],"CopyButtonScriptor"]
4:Tb08,
## Binary Heap 버전

<details>
	<summary>코드</summary>

```c title="pq.cpp"
template<typename T, size_t Size>
struct PQ
{
	struct Node
	{
		friend bool operator<(const T& l, const Node& r) { return l < r.v; } // max first
		bool operator<(const Node& in) { return v < in; }
		T v;
	};
	Node heap[Size];
	int end = 1;

	void push(const T& in)
	{
		heap[end++].v = in;
		int cur = end - 1, next = cur >> 1;
		while (next && heap[next] < heap[cur])
		{
			swap(heap[next], heap[cur]);
			cur = next, next >>= 1;
		}		
	}
	
	T pop()
	{
		if (end <= 1) return {};
	
		T res = heap[1].v;
		heap[1].v = heap[--end].v;
		int cur = 1, next = cur << 1;
		while (next < end)
		{
			if (next+1 < end && heap[next] < heap[next+1]) next++;
			if (heap[next] < heap[cur]) break;
			swap(heap[cur], heap[next]);
			cur = next, next <<= 1;
		}
		return res;
	}
};
```

</details>

바이너리 Heap 을 사용해 우선순위 큐를 구현하였다.



## Binary Heap Plus 버전

<details>
	<summary>코드</summary>

```c title="pq.cpp"
template<typename T, size_t Size>
struct PQ
{
	struct Data { T v; struct PQ<T, Size>::Node* p; };
	struct Node
	{
		bool operator<(const Node& in) const { return data->v > in.data->v; }  // max first
		Data* data;
	};
	Node heap[Size];
	Data dp[Size];
	int end = 1;

	inline bool empty() const { return end <= 1; }
	inline T topValue() const { return heap[1].data->v; }
	inline int64_t topIndex() const { return heap[1].data - dp; }

	inline void Swap(int64_t a, int64_t b)
	{
		swap(heap[a], heap[b]);
		heap[a].data->p = &heap[a];  // swap 마다 heap 내 위치를 유지
		heap[b].data->p = &heap[b];
	}

	void increaseKey(const Data& data)  // bubble this key up 
	{
		if (data.p - heap >= end) return;
		auto cur = data.p - heap, next = cur >> 1;
		while (next && heap[next] < heap[cur])
		{
			Swap(cur, next);
			cur = next, next >>= 1;
		}
	}

	void push(const T& in)
	{
		heap[end].data = &dp[end];
		dp[end].v = in;
		dp[end].p = &heap[end]; end++;
		int cur = end - 1, next = cur >> 1;
		while (next && heap[next] < heap[cur])
		{
			Swap(cur, next);
			cur = next, next >>= 1;
		}
	}

	void pop()
	{
		if (end <= 1) return;

		heap[1].data = heap[--end].data;
		int cur = 1, next = cur << 1;
		while (next < end)
		{
			if (next + 1 < end && heap[next] < heap[next + 1]) next++;
			if (heap[next] < heap[cur]) break;
			Swap(cur, next);
			cur = next, next <<= 1;
		}
	}
};
```

</details>

위 코드에서 Heap 내의 요소를 바로 수정/조회 할 수 있게 변경한 버전.

Priority Queue 에서 정적인 배열 ```dp[]{:c}``` 가 있고 
각 데이터는 Heap 의 Node 와 연동이 되어서 우선순위 큐가 작동한다.

IncreaseKey() 가 핵심 기능으로
Data 를 외부에서 변화시킨 후
이 함수를 호출해서 heap 내부의 위치를 조정한다.5:T65be,<h2 id="Binary-Heap-버전">Binary Heap 버전</h2>
<details>
	<summary>코드</summary>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c" data-theme="github-dark" data-code="template<typename T, size_t Size>
struct PQ
{
	struct Node
	{
		friend bool operator<(const T&#x26; l, const Node&#x26; r) { return l < r.v; } // max first
		bool operator<(const Node&#x26; in) { return v < in; }
		T v;
	};
	Node heap[Size];
	int end = 1;

	void push(const T&#x26; in)
	{
		heap[end++].v = in;
		int cur = end - 1, next = cur >> 1;
		while (next &#x26;&#x26; heap[next] < heap[cur])
		{
			swap(heap[next], heap[cur]);
			cur = next, next >>= 1;
		}		
	}
	
	T pop()
	{
		if (end <= 1) return {};
	
		T res = heap[1].v;
		heap[1].v = heap[--end].v;
		int cur = 1, next = cur << 1;
		while (next < end)
		{
			if (next+1 < end &#x26;&#x26; heap[next] < heap[next+1]) next++;
			if (heap[next] < heap[cur]) break;
			swap(heap[cur], heap[next]);
			cur = next, next <<= 1;
		}
		return res;
	}
};
">pq.cpp<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c" data-theme="github-dark"><code data-language="c" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">template</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">typename T, </span><span style="color:#F97583">size_t</span><span style="color:#79B8FF"> Size</span><span style="color:#F97583">></span></span>
<span data-line=""><span style="color:#F97583">struct</span><span style="color:#E1E4E8"> PQ</span></span>
<span data-line=""><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">	struct</span><span style="color:#E1E4E8"> Node</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#E1E4E8">		friend </span><span style="color:#F97583">bool</span><span style="color:#E1E4E8"> operator</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> T</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> l, </span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> Node</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> r) { </span><span style="color:#F97583">return</span><span style="color:#E1E4E8"> l </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> r.v; }</span><span style="color:#6A737D"> // max first</span></span>
<span data-line=""><span style="color:#F97583">		bool</span><span style="color:#E1E4E8"> operator</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> Node</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> in) { </span><span style="color:#F97583">return</span><span style="color:#E1E4E8"> v </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> in; }</span></span>
<span data-line=""><span style="color:#E1E4E8">		T v;</span></span>
<span data-line=""><span style="color:#E1E4E8">	};</span></span>
<span data-line=""><span style="color:#E1E4E8">	Node </span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">Size</span><span style="color:#E1E4E8">];</span></span>
<span data-line=""><span style="color:#F97583">	int</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	void</span><span style="color:#B392F0"> push</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> T</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> in)</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[end</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">].v </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> in;</span></span>
<span data-line=""><span style="color:#F97583">		int</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">, next </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">>></span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		while</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[cur])</span></span>
<span data-line=""><span style="color:#E1E4E8">		{</span></span>
<span data-line=""><span style="color:#B392F0">			swap</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[next], </span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[cur]);</span></span>
<span data-line=""><span style="color:#E1E4E8">			cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> next, next </span><span style="color:#F97583">>>=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		}		</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""><span style="color:#E1E4E8">	</span></span>
<span data-line=""><span style="color:#E1E4E8">	T </span><span style="color:#B392F0">pop</span><span style="color:#E1E4E8">()</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#F97583">		if</span><span style="color:#E1E4E8"> (end </span><span style="color:#F97583">&#x3C;=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">return</span><span style="color:#E1E4E8"> {};</span></span>
<span data-line=""><span style="color:#E1E4E8">	</span></span>
<span data-line=""><span style="color:#E1E4E8">		T res </span><span style="color:#F97583">=</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">].v;</span></span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">].v </span><span style="color:#F97583">=</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">end].v;</span></span>
<span data-line=""><span style="color:#F97583">		int</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">, next </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">&#x3C;&#x3C;</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		while</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> end)</span></span>
<span data-line=""><span style="color:#E1E4E8">		{</span></span>
<span data-line=""><span style="color:#F97583">			if</span><span style="color:#E1E4E8"> (next</span><span style="color:#F97583">+</span><span style="color:#79B8FF">1</span><span style="color:#F97583"> &#x3C;</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next</span><span style="color:#F97583">+</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">]) next</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">			if</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[cur]) </span><span style="color:#F97583">break</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#B392F0">			swap</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[cur], </span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[next]);</span></span>
<span data-line=""><span style="color:#E1E4E8">			cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> next, next </span><span style="color:#F97583">&#x3C;&#x3C;=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		}</span></span>
<span data-line=""><span style="color:#F97583">		return</span><span style="color:#E1E4E8"> res;</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span></code></pre></figure>
</details>
<p>바이너리 Heap 을 사용해 우선순위 큐를 구현하였다.</p>
<h2 id="Binary-Heap-Plus-버전">Binary Heap Plus 버전</h2>
<details>
	<summary>코드</summary>
<figure data-rehype-pretty-code-figure=""><div data-rehype-pretty-code-title="" data-language="c" data-theme="github-dark" data-code="template<typename T, size_t Size>
struct PQ
{
	struct Data { T v; struct PQ<T, Size>::Node* p; };
	struct Node
	{
		bool operator<(const Node&#x26; in) const { return data->v > in.data->v; }  // max first
		Data* data;
	};
	Node heap[Size];
	Data dp[Size];
	int end = 1;

	inline bool empty() const { return end <= 1; }
	inline T topValue() const { return heap[1].data->v; }
	inline int64_t topIndex() const { return heap[1].data - dp; }

	inline void Swap(int64_t a, int64_t b)
	{
		swap(heap[a], heap[b]);
		heap[a].data->p = &#x26;heap[a];  // swap 마다 heap 내 위치를 유지
		heap[b].data->p = &#x26;heap[b];
	}

	void increaseKey(const Data&#x26; data)  // bubble this key up 
	{
		if (data.p - heap >= end) return;
		auto cur = data.p - heap, next = cur >> 1;
		while (next &#x26;&#x26; heap[next] < heap[cur])
		{
			Swap(cur, next);
			cur = next, next >>= 1;
		}
	}

	void push(const T&#x26; in)
	{
		heap[end].data = &#x26;dp[end];
		dp[end].v = in;
		dp[end].p = &#x26;heap[end]; end++;
		int cur = end - 1, next = cur >> 1;
		while (next &#x26;&#x26; heap[next] < heap[cur])
		{
			Swap(cur, next);
			cur = next, next >>= 1;
		}
	}

	void pop()
	{
		if (end <= 1) return;

		heap[1].data = heap[--end].data;
		int cur = 1, next = cur << 1;
		while (next < end)
		{
			if (next + 1 < end &#x26;&#x26; heap[next] < heap[next + 1]) next++;
			if (heap[next] < heap[cur]) break;
			Swap(cur, next);
			cur = next, next <<= 1;
		}
	}
};
">pq.cpp<button title="code-copy-btn"></button></div><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="c" data-theme="github-dark"><code data-language="c" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">template</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">typename T, </span><span style="color:#F97583">size_t</span><span style="color:#79B8FF"> Size</span><span style="color:#F97583">></span></span>
<span data-line=""><span style="color:#F97583">struct</span><span style="color:#E1E4E8"> PQ</span></span>
<span data-line=""><span style="color:#E1E4E8">{</span></span>
<span data-line=""><span style="color:#F97583">	struct</span><span style="color:#E1E4E8"> Data { T v; </span><span style="color:#F97583">struct</span><span style="color:#E1E4E8"> PQ</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">T, </span><span style="color:#79B8FF">Size</span><span style="color:#F97583">></span><span style="color:#E1E4E8">::Node</span><span style="color:#F97583">*</span><span style="color:#E1E4E8"> p; };</span></span>
<span data-line=""><span style="color:#F97583">	struct</span><span style="color:#E1E4E8"> Node</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#F97583">		bool</span><span style="color:#E1E4E8"> operator</span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> Node</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> in) </span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#F97583">return</span><span style="color:#E1E4E8"> data->v </span><span style="color:#F97583">></span><span style="color:#E1E4E8"> in.data->v; }</span><span style="color:#6A737D">  // max first</span></span>
<span data-line=""><span style="color:#E1E4E8">		Data</span><span style="color:#F97583">*</span><span style="color:#E1E4E8"> data;</span></span>
<span data-line=""><span style="color:#E1E4E8">	};</span></span>
<span data-line=""><span style="color:#E1E4E8">	Node </span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">Size</span><span style="color:#E1E4E8">];</span></span>
<span data-line=""><span style="color:#E1E4E8">	Data </span><span style="color:#FFAB70">dp</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">Size</span><span style="color:#E1E4E8">];</span></span>
<span data-line=""><span style="color:#F97583">	int</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	inline</span><span style="color:#F97583"> bool</span><span style="color:#B392F0"> empty</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#F97583">return</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">&#x3C;=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">; }</span></span>
<span data-line=""><span style="color:#F97583">	inline</span><span style="color:#E1E4E8"> T </span><span style="color:#B392F0">topValue</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#F97583">return</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">].data->v; }</span></span>
<span data-line=""><span style="color:#F97583">	inline</span><span style="color:#F97583"> int64_t</span><span style="color:#B392F0"> topIndex</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> { </span><span style="color:#F97583">return</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">].data </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> dp; }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	inline</span><span style="color:#F97583"> void</span><span style="color:#B392F0"> Swap</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">int64_t</span><span style="color:#E1E4E8"> a, </span><span style="color:#F97583">int64_t</span><span style="color:#E1E4E8"> b)</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#B392F0">		swap</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[a], </span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[b]);</span></span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[a].data->p </span><span style="color:#F97583">=</span><span style="color:#F97583"> &#x26;</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[a];</span><span style="color:#6A737D">  // swap 마다 heap 내 위치를 유지</span></span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[b].data->p </span><span style="color:#F97583">=</span><span style="color:#F97583"> &#x26;</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[b];</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	void</span><span style="color:#B392F0"> increaseKey</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> Data</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> data)</span><span style="color:#6A737D">  // bubble this key up </span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#F97583">		if</span><span style="color:#E1E4E8"> (data.p </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> heap </span><span style="color:#F97583">>=</span><span style="color:#E1E4E8"> end) </span><span style="color:#F97583">return</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		auto cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> data.p </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> heap, next </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">>></span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		while</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[cur])</span></span>
<span data-line=""><span style="color:#E1E4E8">		{</span></span>
<span data-line=""><span style="color:#B392F0">			Swap</span><span style="color:#E1E4E8">(cur, next);</span></span>
<span data-line=""><span style="color:#E1E4E8">			cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> next, next </span><span style="color:#F97583">>>=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		}</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	void</span><span style="color:#B392F0"> push</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">const</span><span style="color:#E1E4E8"> T</span><span style="color:#F97583">&#x26;</span><span style="color:#E1E4E8"> in)</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[end].data </span><span style="color:#F97583">=</span><span style="color:#F97583"> &#x26;</span><span style="color:#FFAB70">dp</span><span style="color:#E1E4E8">[end];</span></span>
<span data-line=""><span style="color:#FFAB70">		dp</span><span style="color:#E1E4E8">[end].v </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> in;</span></span>
<span data-line=""><span style="color:#FFAB70">		dp</span><span style="color:#E1E4E8">[end].p </span><span style="color:#F97583">=</span><span style="color:#F97583"> &#x26;</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[end]; end</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		int</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">, next </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">>></span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		while</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[cur])</span></span>
<span data-line=""><span style="color:#E1E4E8">		{</span></span>
<span data-line=""><span style="color:#B392F0">			Swap</span><span style="color:#E1E4E8">(cur, next);</span></span>
<span data-line=""><span style="color:#E1E4E8">			cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> next, next </span><span style="color:#F97583">>>=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		}</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">	void</span><span style="color:#B392F0"> pop</span><span style="color:#E1E4E8">()</span></span>
<span data-line=""><span style="color:#E1E4E8">	{</span></span>
<span data-line=""><span style="color:#F97583">		if</span><span style="color:#E1E4E8"> (end </span><span style="color:#F97583">&#x3C;=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">return</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FFAB70">		heap</span><span style="color:#E1E4E8">[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">].data </span><span style="color:#F97583">=</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[</span><span style="color:#F97583">--</span><span style="color:#E1E4E8">end].data;</span></span>
<span data-line=""><span style="color:#F97583">		int</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">, next </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> cur </span><span style="color:#F97583">&#x3C;&#x3C;</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">		while</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">&#x3C;</span><span style="color:#E1E4E8"> end)</span></span>
<span data-line=""><span style="color:#E1E4E8">		{</span></span>
<span data-line=""><span style="color:#F97583">			if</span><span style="color:#E1E4E8"> (next </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#F97583"> &#x3C;</span><span style="color:#E1E4E8"> end </span><span style="color:#F97583">&#x26;&#x26;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[next </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">]) next</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#F97583">			if</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">heap</span><span style="color:#E1E4E8">[next] </span><span style="color:#F97583">&#x3C;</span><span style="color:#FFAB70"> heap</span><span style="color:#E1E4E8">[cur]) </span><span style="color:#F97583">break</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#B392F0">			Swap</span><span style="color:#E1E4E8">(cur, next);</span></span>
<span data-line=""><span style="color:#E1E4E8">			cur </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> next, next </span><span style="color:#F97583">&#x3C;&#x3C;=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">		}</span></span>
<span data-line=""><span style="color:#E1E4E8">	}</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span></code></pre></figure>
</details>
<p>위 코드에서 Heap 내의 요소를 바로 수정/조회 할 수 있게 변경한 버전.</p>
<p>Priority Queue 에서 정적인 배열 <span data-rehype-pretty-code-figure=""><code data-language="c" data-theme="github-dark" style="background-color:#24292e;color:#e1e4e8"><span data-line=""><span style="color:#E1E4E8">dp</span><span style="color:#F97583">[]</span></span></code></span> 가 있고
각 데이터는 Heap 의 Node 와 연동이 되어서 우선순위 큐가 작동한다.</p>
<p>IncreaseKey() 가 핵심 기능으로
Data 를 외부에서 변화시킨 후
이 함수를 호출해서 heap 내부의 위치를 조정한다.</p>a:["categories","computer-science/algorithm/priority-queue","c"]
0:["e1hzxGHRW04dFbvuA9v4_",[[["",{"children":["blog",{"children":[["categories","computer-science/algorithm/priority-queue","c"],{"children":["__PAGE__?{\"categories\":[\"computer-science\",\"algorithm\",\"priority-queue\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["categories","computer-science/algorithm/priority-queue","c"],{"children":["__PAGE__",{},[["$L1",["$","article",null,{"className":"content2","children":[["$","h1",null,{"className":"mobile:tw-text-2xl tw-text-3xl tw-leading-normal tw-font-bold tw-mt-0","itemProp":"headline","children":"Priority Queue"}],["$","nav",null,{"className":"tw-flex tw-flex-row tw-text-smtw-mb-4","children":[["$","span",null,{"className":"material-symbols-outlined md-base tw-self-center tw-align-text-top  tw-w-5","children":"folder_open"}],["$","$L2",null,{"className":"tw-text-sm","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"Home"}],[["$","div","/blog/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"blog"}]]}],["$","div","/blog/computer-science/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"computer-science"}]]}],["$","div","/blog/computer-science/algorithm/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/algorithm/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"algorithm"}]]}],["$","div","/blog/computer-science/algorithm/priority-queue/",{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","div",null,{"children":"/"}],["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/algorithm/priority-queue/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"priority-queue"}]]}]],"$undefined"]}],["$","div",null,{"className":"tw-mt-0.5","children":["$","div",null,{"className":"tw-flex tw-flex-row tw-text-sm","children":[["$","i",null,{"className":"material-symbols-outlined md-sm tw-self-center tw-w-5","children":"schedule"}],["$","div",null,{"className":"tw-color-text-dimmed","children":"Posted  :"}],["$","div",null,{"className":"tw-ml-2","children":"12/5/2024"}]]}]}],["$","$L3",null,{"mdSrc":"$4"}],["$","hr",null,{}],["$","section",null,{"className":"tw-my-10","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$5"}}]}],["$","$L6",null,{"tags":["ps","priority_queue"]}],["$","hr",null,{"className":"tw-my-4"}],["$","section",null,{"className":"tw-m-0 tw-p-0","children":["$","div",null,{"className":"tw-grid tw-grid-cols-2","children":[["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-color-border tw-border-2 ","children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 tw-text-color-border","children":"Previous Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"$undefined"}]]}]}],["$","article",null,{"className":"tw-m-1 tw-rounded-2xl tw-border-2 tw-border-color-border tw-overflow-hidden hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/algorithm/dijstra","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-m-2 tw-overflow-hidden tw-text-center","children":[["$","h5",null,{"className":"tw-mb-0 tw-mt-0 false","children":"Next Post"}],["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden","children":"Dijkstra Algorithm"}]]}]}]}]]}]}],["$","hr",null,{"className":"tw-my-4"}],[["$","$L7",null,{}]," ",["$","hr",null,{"className":"tw-my-4"}]],["$","section",null,{"className":"","children":[["$","h4",null,{"className":"tw-mt-0 tw-mb-2","children":"Related Posts"}],["$","div",null,{"className":"tw-grid tw-grid-cols-1 desk:tw-grid-cols-2 medium:tw-grid-cols-4 medium-wide:tw-grid-cols-4","children":[["$","$L8",null,{"children":["$","article",null,{"className":"mobile:tw-h-24 tw-m-1 tw-border-2 tw-rounded-2xl tw-border-color-border hover:tw-border-color-primary hover:tw-transition-all hover:tw-duration-500","children":["$","$L2",null,{"className":"$undefined","href":"/blog/computer-science/algorithm/dijstra","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":["$","div",null,{"className":"tw-grid mobile:tw-grid-cols-3 tw-m-2 tw-overflow-hidden","children":["$undefined",["$","div",null,{"className":"mobile:tw-col-span-2 mobile:tw-h-20 desk:tw-max-h-36 tw-mx-2 tw-overflow-hidden","children":[["$","h4",null,{"className":"tw-mb-0 tw-mt-0  tw-whitespace-nowrap tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"Dijkstra Algorithm"}],["$","p",null,{"className":"tw-text-color-text-light tw-text-sm  tw-text-ellipsis tw-overflow-hidden tooltip-hover","children":"dijkstra 를 이해하고 구현해보자."}]]}]]}]}]}]}]]}]]}]]}],[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/d1ab85c59d8dbdc1.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$a","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null],null]},[null,["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/study-log/_next/static/css/dd7e91777d3df03c.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/study-log/_next/static/css/a40a511565153bc1.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"tw-relative tw-min-h-screen tw-bg-color-page-background","children":[["$","script",null,{"dangerouslySetInnerHTML":{"__html":"(function(){try{(null==localStorage.getItem(\"theme\")&&window.matchMedia(\"(prefers-color-scheme: dark)\").matches||\"dark\"==localStorage.getItem(\"theme\"))&&document.documentElement.setAttribute(\"data-theme\",\"dark\")}catch(e){}})()"}}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+KR&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Gothic+A1&display=swap"}],["$","link",null,{"rel":"stylesheet","href":"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"}],["$","link",null,{"rel":"stylesheet","href":"https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css","integrity":"sha384-Xi8rHCmBmhbuyyhbI88391ZKP2dmfnOl4rT9ZfRI7mLTdk1wblIUnrIq35nqwEvC","crossOrigin":"anonymous"}],["$","$Lc",null,{"children":[["$","nav",null,{"className":"masthead_masthead__zVIwm","children":[["$","$Ld",null,{}],["$","$L2",null,{"className":"tw-self-center tw-ml-1 tw-font-sans tw-font-bold tw-text-color-primary tw-text-xl hover:tw-text-color-text","href":"/","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":"LOG | STUDY"}],["$","div",null,{"className":"tw-grow"}],["$","$Le",null,{"className":"tw-flex tw-self-center tw-text-xl"}],["$","$Lf",null,{"className":"tw-flex tw-self-center tw-ml-2 tw-mr-4 tw-text-xl "}]]}],["$","$L10",null,{}],["$","aside",null,{"children":["$","$L11",null,{"children":["$","div",null,{"className":"sidebar_sidebar__gN2ma","children":[["$","$L12",null,{"slug":"/","label":"HOME","refCount":-1,"depth":0}],["$","$L12",null,{"slug":"/portfolio","label":"PORTFOLIO★","refCount":-1,"depth":0}],["$","$L12",null,{"slug":"/tags","label":"TAGS","refCount":-1,"depth":0}],["$","div",null,{"children":[["$","$L12","/blog",{"slug":"/blog","label":"BLOG","refCount":24,"depth":0,"children":[["$","$L12","/blog/ps",{"slug":"/blog/ps","label":"PS","refCount":1,"depth":1,"children":"$undefined"}],["$","$L12","/blog/study",{"slug":"/blog/study","label":"STUDY","refCount":1,"depth":1,"children":"$undefined"}],["$","$L12","/blog/thinking",{"slug":"/blog/thinking","label":"THINKING","refCount":1,"depth":1,"children":"$undefined"}],["$","$L12","/blog/computer-science",{"slug":"/blog/computer-science","label":"COMPUTER-SCIENCE","refCount":5,"depth":1,"children":[["$","$L12","/blog/computer-science/algorithm",{"slug":"/blog/computer-science/algorithm","label":"ALGORITHM","refCount":2,"depth":2,"children":"$undefined"}],["$","$L12","/blog/computer-science/graphics",{"slug":"/blog/computer-science/graphics","label":"GRAPHICS","refCount":3,"depth":2,"children":"$undefined"}]]}],["$","$L12","/blog/programming",{"slug":"/blog/programming","label":"PROGRAMMING","refCount":16,"depth":1,"children":[["$","$L12","/blog/programming/cpp",{"slug":"/blog/programming/cpp","label":"CPP","refCount":1,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/pattern",{"slug":"/blog/programming/pattern","label":"PATTERN","refCount":6,"depth":2,"children":[["$","$L12","/blog/programming/pattern/concurrency",{"slug":"/blog/programming/pattern/concurrency","label":"CONCURRENCY","refCount":2,"depth":3,"children":"$undefined"}]]}],["$","$L12","/blog/programming/tips",{"slug":"/blog/programming/tips","label":"TIPS","refCount":2,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/web",{"slug":"/blog/programming/web","label":"WEB","refCount":3,"depth":2,"children":"$undefined"}],["$","$L12","/blog/programming/wpf",{"slug":"/blog/programming/wpf","label":"WPF","refCount":4,"depth":2,"children":"$undefined"}]]}]]}]]}]]}]}]}],["$","section",null,{"children":["$","$L13",null,{"children":["$","$L14",null,{}]}]}],["$","main",null,{"className":"tw-mt-nav-height tw-pb-52","children":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lb",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","div",null,{"children":"404"}]}],"notFoundStyles":[]}]}],["$","footer",null,{"className":"tw-absolute tw-w-full -tw-bottom-20","children":["$","div",null,{"className":"tw-backdrop-brightness-95 tw-text-xs","children":["$","div",null,{"className":"tw-flex tw-p-4 tw-mr-4 tw-ml-4 mobile:tw-flex-col dark:tw-border-t-color-border dark:tw-border-t-2","children":[["$","div",null,{"className":"tw-flex-col","children":[["$","div",null,{"className":"tw-mb-3","children":["$","$L2",null,{"className":"tw-flex tw-self-center","href":"https://github.com/Mona04","rel":"$undefined","target":"_self","onClick":"$undefined","prefetch":false,"children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 1024 1024","className":"tw-self-center","children":["$undefined",[["$","path","0",{"d":"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","children":"$undefined"}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}],["$","div",null,{"className":"tw-ml-1 tw-font-bold","children":"GITHUB"}]]}]}],["$","div",null,{"className":"","children":["© 2025 Mona04. Powered by ",["$","$L2",null,{"className":"$undefined","href":"https://nextjs.org/","rel":"noopener noreferrer","target":"_blank","onClick":"$undefined","prefetch":false,"children":"NextJS"}],"."]}]]}],["$","div",null,{"className":"tw-flex tw-self-end tw-ml-auto mobile:tw-hidden","children":[["$","div",null,{"className":"","children":"Last Build:"}],["$","div",null,{"className":"tw-ml-1","children":"4:25"}],["$","div",null,{"className":"tw-ml-1","children":"2025/1/18"}]]}]]}]}]}]]}],["$","$L15",null,{}]]}]}]],null],null],["$L16",null]]]]
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Priority Queue"}],["$","meta","3",{"name":"description","content":"Priority Queue 를 구현해보자."}],["$","link","4",{"rel":"author","href":"moksha1905@gmail.com"}],["$","meta","5",{"name":"author","content":"Mona04"}],["$","meta","6",{"name":"category","content":"/blog/computer-science/algorithm/priority-queue"}],["$","link","7",{"rel":"canonical","href":"https://mona04.github.io/study-log/blog/computer-science/algorithm/priority-queue"}],["$","link","8",{"rel":"icon","href":"/study-log/favicon.ico"}]]
1:null
