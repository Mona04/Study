/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lunr-languages";
exports.ids = ["vendor-chunks/lunr-languages"];
exports.modules = {

/***/ "(ssr)/./node_modules/lunr-languages/lunr.multi.js":
/*!***************************************************!*\
  !*** ./node_modules/lunr-languages/lunr.multi.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * export the module via AMD, CommonJS or as a browser global\n * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n */\n;(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n    } else {}\n}(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return function(lunr) {\n        /* Set up the pipeline for indexing content in multiple languages. The\n           corresponding lunr.{lang} files must be loaded before calling this\n           function; English ('en') is built in.\n\n           Returns: a lunr plugin for use in your indexer.\n\n           Known drawback: every word will be stemmed with stemmers for every\n           language. This could mean that sometimes words that have the same\n           stemming root will not be stemmed as such.\n           */\n        lunr.multiLanguage = function(/* lang1, lang2, ... */) {\n            var languages = Array.prototype.slice.call(arguments);\n            var nameSuffix = languages.join('-');\n            var wordCharacters = \"\";\n            var pipeline = [];\n            var searchPipeline = [];\n            for (var i = 0; i < languages.length; ++i) {\n                if (languages[i] == 'en') {\n                    wordCharacters += '\\\\w';\n                    pipeline.unshift(lunr.stopWordFilter);\n                    pipeline.push(lunr.stemmer);\n                    searchPipeline.push(lunr.stemmer);\n                } else {\n                    wordCharacters += lunr[languages[i]].wordCharacters;\n                    if (lunr[languages[i]].stopWordFilter) {\n                        pipeline.unshift(lunr[languages[i]].stopWordFilter);\n                    }\n                    if (lunr[languages[i]].stemmer) {\n                        pipeline.push(lunr[languages[i]].stemmer);\n                        searchPipeline.push(lunr[languages[i]].stemmer);\n                    }\n                }\n            };\n            var multiTrimmer = lunr.trimmerSupport.generateTrimmer(wordCharacters);\n            lunr.Pipeline.registerFunction(multiTrimmer, 'lunr-multi-trimmer-' + nameSuffix);\n            pipeline.unshift(multiTrimmer);\n\n            return function() {\n                this.pipeline.reset();\n\n                this.pipeline.add.apply(this.pipeline, pipeline);\n\n                // for lunr version 2\n                // this is necessary so that every searched word is also stemmed before\n                // in lunr <= 1 this is not needed, as it is done using the normal pipeline\n                if (this.searchPipeline) {\n                    this.searchPipeline.reset();\n                    this.searchPipeline.add.apply(this.searchPipeline, searchPipeline);\n                }\n            };\n        }\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbHVuci1sYW5ndWFnZXMvbHVuci5tdWx0aS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxRQUFRLElBQTBDO0FBQ2xEO0FBQ0EsUUFBUSxvQ0FBTyxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0dBQUM7QUFDdkIsTUFBTSxLQUFLLEVBVU47QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsTUFBTTtBQUNyQyxxQkFBcUI7O0FBRXJCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2x1bnItbGFuZ3VhZ2VzL2x1bnIubXVsdGkuanM/MGMxNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGV4cG9ydCB0aGUgbW9kdWxlIHZpYSBBTUQsIENvbW1vbkpTIG9yIGFzIGEgYnJvd3NlciBnbG9iYWxcbiAqIEV4cG9ydCBjb2RlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gKi9cbjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKGZhY3RvcnkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAgKiBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgICogbGlrZSBOb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KClcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICBmYWN0b3J5KCkocm9vdC5sdW5yKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBKdXN0IHJldHVybiBhIHZhbHVlIHRvIGRlZmluZSB0aGUgbW9kdWxlIGV4cG9ydC5cbiAgICAgKiBUaGlzIGV4YW1wbGUgcmV0dXJucyBhbiBvYmplY3QsIGJ1dCB0aGUgbW9kdWxlXG4gICAgICogY2FuIHJldHVybiBhIGZ1bmN0aW9uIGFzIHRoZSBleHBvcnRlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24obHVucikge1xuICAgICAgICAvKiBTZXQgdXAgdGhlIHBpcGVsaW5lIGZvciBpbmRleGluZyBjb250ZW50IGluIG11bHRpcGxlIGxhbmd1YWdlcy4gVGhlXG4gICAgICAgICAgIGNvcnJlc3BvbmRpbmcgbHVuci57bGFuZ30gZmlsZXMgbXVzdCBiZSBsb2FkZWQgYmVmb3JlIGNhbGxpbmcgdGhpc1xuICAgICAgICAgICBmdW5jdGlvbjsgRW5nbGlzaCAoJ2VuJykgaXMgYnVpbHQgaW4uXG5cbiAgICAgICAgICAgUmV0dXJuczogYSBsdW5yIHBsdWdpbiBmb3IgdXNlIGluIHlvdXIgaW5kZXhlci5cblxuICAgICAgICAgICBLbm93biBkcmF3YmFjazogZXZlcnkgd29yZCB3aWxsIGJlIHN0ZW1tZWQgd2l0aCBzdGVtbWVycyBmb3IgZXZlcnlcbiAgICAgICAgICAgbGFuZ3VhZ2UuIFRoaXMgY291bGQgbWVhbiB0aGF0IHNvbWV0aW1lcyB3b3JkcyB0aGF0IGhhdmUgdGhlIHNhbWVcbiAgICAgICAgICAgc3RlbW1pbmcgcm9vdCB3aWxsIG5vdCBiZSBzdGVtbWVkIGFzIHN1Y2guXG4gICAgICAgICAgICovXG4gICAgICAgIGx1bnIubXVsdGlMYW5ndWFnZSA9IGZ1bmN0aW9uKC8qIGxhbmcxLCBsYW5nMiwgLi4uICovKSB7XG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHZhciBuYW1lU3VmZml4ID0gbGFuZ3VhZ2VzLmpvaW4oJy0nKTtcbiAgICAgICAgICAgIHZhciB3b3JkQ2hhcmFjdGVycyA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgcGlwZWxpbmUgPSBbXTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hQaXBlbGluZSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYW5ndWFnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VzW2ldID09ICdlbicpIHtcbiAgICAgICAgICAgICAgICAgICAgd29yZENoYXJhY3RlcnMgKz0gJ1xcXFx3JztcbiAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUudW5zaGlmdChsdW5yLnN0b3BXb3JkRmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUucHVzaChsdW5yLnN0ZW1tZXIpO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hQaXBlbGluZS5wdXNoKGx1bnIuc3RlbW1lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd29yZENoYXJhY3RlcnMgKz0gbHVucltsYW5ndWFnZXNbaV1dLndvcmRDaGFyYWN0ZXJzO1xuICAgICAgICAgICAgICAgICAgICBpZiAobHVucltsYW5ndWFnZXNbaV1dLnN0b3BXb3JkRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS51bnNoaWZ0KGx1bnJbbGFuZ3VhZ2VzW2ldXS5zdG9wV29yZEZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGx1bnJbbGFuZ3VhZ2VzW2ldXS5zdGVtbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXBlbGluZS5wdXNoKGx1bnJbbGFuZ3VhZ2VzW2ldXS5zdGVtbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFBpcGVsaW5lLnB1c2gobHVucltsYW5ndWFnZXNbaV1dLnN0ZW1tZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBtdWx0aVRyaW1tZXIgPSBsdW5yLnRyaW1tZXJTdXBwb3J0LmdlbmVyYXRlVHJpbW1lcih3b3JkQ2hhcmFjdGVycyk7XG4gICAgICAgICAgICBsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyRnVuY3Rpb24obXVsdGlUcmltbWVyLCAnbHVuci1tdWx0aS10cmltbWVyLScgKyBuYW1lU3VmZml4KTtcbiAgICAgICAgICAgIHBpcGVsaW5lLnVuc2hpZnQobXVsdGlUcmltbWVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGlwZWxpbmUucmVzZXQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucGlwZWxpbmUuYWRkLmFwcGx5KHRoaXMucGlwZWxpbmUsIHBpcGVsaW5lKTtcblxuICAgICAgICAgICAgICAgIC8vIGZvciBsdW5yIHZlcnNpb24gMlxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IHNvIHRoYXQgZXZlcnkgc2VhcmNoZWQgd29yZCBpcyBhbHNvIHN0ZW1tZWQgYmVmb3JlXG4gICAgICAgICAgICAgICAgLy8gaW4gbHVuciA8PSAxIHRoaXMgaXMgbm90IG5lZWRlZCwgYXMgaXQgaXMgZG9uZSB1c2luZyB0aGUgbm9ybWFsIHBpcGVsaW5lXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoUGlwZWxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hQaXBlbGluZS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFBpcGVsaW5lLmFkZC5hcHBseSh0aGlzLnNlYXJjaFBpcGVsaW5lLCBzZWFyY2hQaXBlbGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn0pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lunr-languages/lunr.multi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lunr-languages/lunr.stemmer.support.js":
/*!*************************************************************!*\
  !*** ./node_modules/lunr-languages/lunr.stemmer.support.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Snowball JavaScript Library v0.3\n * http://code.google.com/p/urim/\n * http://snowball.tartarus.org/\n *\n * Copyright 2010, Oleg Mazko\n * http://www.mozilla.org/MPL/\n */\n\n/**\n * export the module via AMD, CommonJS or as a browser global\n * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n */\n;(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n    } else {}\n}(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return function(lunr) {\n        /* provides utilities for the included stemmers */\n        lunr.stemmerSupport = {\n            Among: function(s, substring_i, result, method) {\n                this.toCharArray = function(s) {\n                    var sLength = s.length, charArr = new Array(sLength);\n                    for (var i = 0; i < sLength; i++)\n                        charArr[i] = s.charCodeAt(i);\n                    return charArr;\n                };\n\n                if ((!s && s != \"\") || (!substring_i && (substring_i != 0)) || !result)\n                    throw (\"Bad Among initialisation: s:\" + s + \", substring_i: \"\n                        + substring_i + \", result: \" + result);\n                this.s_size = s.length;\n                this.s = this.toCharArray(s);\n                this.substring_i = substring_i;\n                this.result = result;\n                this.method = method;\n            },\n            SnowballProgram: function() {\n                var current;\n                return {\n                    bra : 0,\n                    ket : 0,\n                    limit : 0,\n                    cursor : 0,\n                    limit_backward : 0,\n                    setCurrent : function(word) {\n                        current = word;\n                        this.cursor = 0;\n                        this.limit = word.length;\n                        this.limit_backward = 0;\n                        this.bra = this.cursor;\n                        this.ket = this.limit;\n                    },\n                    getCurrent : function() {\n                        var result = current;\n                        current = null;\n                        return result;\n                    },\n                    in_grouping : function(s, min, max) {\n                        if (this.cursor < this.limit) {\n                            var ch = current.charCodeAt(this.cursor);\n                            if (ch <= max && ch >= min) {\n                                ch -= min;\n                                if (s[ch >> 3] & (0X1 << (ch & 0X7))) {\n                                    this.cursor++;\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    },\n                    in_grouping_b : function(s, min, max) {\n                        if (this.cursor > this.limit_backward) {\n                            var ch = current.charCodeAt(this.cursor - 1);\n                            if (ch <= max && ch >= min) {\n                                ch -= min;\n                                if (s[ch >> 3] & (0X1 << (ch & 0X7))) {\n                                    this.cursor--;\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    },\n                    out_grouping : function(s, min, max) {\n                        if (this.cursor < this.limit) {\n                            var ch = current.charCodeAt(this.cursor);\n                            if (ch > max || ch < min) {\n                                this.cursor++;\n                                return true;\n                            }\n                            ch -= min;\n                            if (!(s[ch >> 3] & (0X1 << (ch & 0X7)))) {\n                                this.cursor++;\n                                return true;\n                            }\n                        }\n                        return false;\n                    },\n                    out_grouping_b : function(s, min, max) {\n                        if (this.cursor > this.limit_backward) {\n                            var ch = current.charCodeAt(this.cursor - 1);\n                            if (ch > max || ch < min) {\n                                this.cursor--;\n                                return true;\n                            }\n                            ch -= min;\n                            if (!(s[ch >> 3] & (0X1 << (ch & 0X7)))) {\n                                this.cursor--;\n                                return true;\n                            }\n                        }\n                        return false;\n                    },\n                    eq_s : function(s_size, s) {\n                        if (this.limit - this.cursor < s_size)\n                            return false;\n                        for (var i = 0; i < s_size; i++)\n                            if (current.charCodeAt(this.cursor + i) != s.charCodeAt(i))\n                                return false;\n                        this.cursor += s_size;\n                        return true;\n                    },\n                    eq_s_b : function(s_size, s) {\n                        if (this.cursor - this.limit_backward < s_size)\n                            return false;\n                        for (var i = 0; i < s_size; i++)\n                            if (current.charCodeAt(this.cursor - s_size + i) != s\n                                .charCodeAt(i))\n                                return false;\n                        this.cursor -= s_size;\n                        return true;\n                    },\n                    find_among : function(v, v_size) {\n                        var i = 0, j = v_size, c = this.cursor, l = this.limit, common_i = 0, common_j = 0, first_key_inspected = false;\n                        while (true) {\n                            var k = i + ((j - i) >> 1), diff = 0, common = common_i < common_j\n                                ? common_i\n                                : common_j, w = v[k];\n                            for (var i2 = common; i2 < w.s_size; i2++) {\n                                if (c + common == l) {\n                                    diff = -1;\n                                    break;\n                                }\n                                diff = current.charCodeAt(c + common) - w.s[i2];\n                                if (diff)\n                                    break;\n                                common++;\n                            }\n                            if (diff < 0) {\n                                j = k;\n                                common_j = common;\n                            } else {\n                                i = k;\n                                common_i = common;\n                            }\n                            if (j - i <= 1) {\n                                if (i > 0 || j == i || first_key_inspected)\n                                    break;\n                                first_key_inspected = true;\n                            }\n                        }\n                        while (true) {\n                            var w = v[i];\n                            if (common_i >= w.s_size) {\n                                this.cursor = c + w.s_size;\n                                if (!w.method)\n                                    return w.result;\n                                var res = w.method();\n                                this.cursor = c + w.s_size;\n                                if (res)\n                                    return w.result;\n                            }\n                            i = w.substring_i;\n                            if (i < 0)\n                                return 0;\n                        }\n                    },\n                    find_among_b : function(v, v_size) {\n                        var i = 0, j = v_size, c = this.cursor, lb = this.limit_backward, common_i = 0, common_j = 0, first_key_inspected = false;\n                        while (true) {\n                            var k = i + ((j - i) >> 1), diff = 0, common = common_i < common_j\n                                ? common_i\n                                : common_j, w = v[k];\n                            for (var i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n                                if (c - common == lb) {\n                                    diff = -1;\n                                    break;\n                                }\n                                diff = current.charCodeAt(c - 1 - common) - w.s[i2];\n                                if (diff)\n                                    break;\n                                common++;\n                            }\n                            if (diff < 0) {\n                                j = k;\n                                common_j = common;\n                            } else {\n                                i = k;\n                                common_i = common;\n                            }\n                            if (j - i <= 1) {\n                                if (i > 0 || j == i || first_key_inspected)\n                                    break;\n                                first_key_inspected = true;\n                            }\n                        }\n                        while (true) {\n                            var w = v[i];\n                            if (common_i >= w.s_size) {\n                                this.cursor = c - w.s_size;\n                                if (!w.method)\n                                    return w.result;\n                                var res = w.method();\n                                this.cursor = c - w.s_size;\n                                if (res)\n                                    return w.result;\n                            }\n                            i = w.substring_i;\n                            if (i < 0)\n                                return 0;\n                        }\n                    },\n                    replace_s : function(c_bra, c_ket, s) {\n                        var adjustment = s.length - (c_ket - c_bra), left = current\n                            .substring(0, c_bra), right = current.substring(c_ket);\n                        current = left + s + right;\n                        this.limit += adjustment;\n                        if (this.cursor >= c_ket)\n                            this.cursor += adjustment;\n                        else if (this.cursor > c_bra)\n                            this.cursor = c_bra;\n                        return adjustment;\n                    },\n                    slice_check : function() {\n                        if (this.bra < 0 || this.bra > this.ket || this.ket > this.limit\n                            || this.limit > current.length)\n                            throw (\"faulty slice operation\");\n                    },\n                    slice_from : function(s) {\n                        this.slice_check();\n                        this.replace_s(this.bra, this.ket, s);\n                    },\n                    slice_del : function() {\n                        this.slice_from(\"\");\n                    },\n                    insert : function(c_bra, c_ket, s) {\n                        var adjustment = this.replace_s(c_bra, c_ket, s);\n                        if (c_bra <= this.bra)\n                            this.bra += adjustment;\n                        if (c_bra <= this.ket)\n                            this.ket += adjustment;\n                    },\n                    slice_to : function() {\n                        this.slice_check();\n                        return current.substring(this.bra, this.ket);\n                    },\n                    eq_v_b : function(s) {\n                        return this.eq_s_b(s.length, s);\n                    }\n                };\n            }\n        };\n\n        lunr.trimmerSupport = {\n            generateTrimmer: function(wordCharacters) {\n                var startRegex = new RegExp(\"^[^\" + wordCharacters + \"]+\")\n                var endRegex = new RegExp(\"[^\" + wordCharacters + \"]+$\")\n\n                return function(token) {\n                    // for lunr version 2\n                    if (typeof token.update === \"function\") {\n                        return token.update(function (s) {\n                            return s\n                                .replace(startRegex, '')\n                                .replace(endRegex, '');\n                        })\n                    } else { // for lunr version 1\n                        return token\n                            .replace(startRegex, '')\n                            .replace(endRegex, '');\n                    }\n                };\n            }\n        }\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lunr-languages/lunr.stemmer.support.js\n");

/***/ })

};
;